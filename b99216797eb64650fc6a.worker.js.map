{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/lzma/src/lzma_worker.js","webpack:///./node_modules/core-js/modules/_array-methods.js","webpack:///./node_modules/core-js/modules/_is-array.js","webpack:///./node_modules/base64-js/index.js","webpack:///./node_modules/core-js/modules/_dom-create.js","webpack:///./node_modules/core-js/modules/_redefine.js","webpack:///./node_modules/core-js/modules/_wks.js","webpack:///./node_modules/core-js/modules/_library.js","webpack:///./node_modules/core-js/modules/_cof.js","webpack:///./node_modules/core-js/modules/_hide.js","webpack:///./node_modules/core-js/modules/_to-integer.js","webpack:///./node_modules/core-js/modules/_property-desc.js","webpack:///./node_modules/core-js/modules/_to-object.js","webpack:///./node_modules/core-js/modules/_shared.js","webpack:///./node_modules/core-js/modules/_export.js","webpack:///./node_modules/core-js/modules/_iobject.js","webpack:///./node_modules/core-js/modules/_has.js","webpack:///./node_modules/core-js/modules/_to-primitive.js","webpack:///./node_modules/core-js/modules/es6.array.find.js","webpack:///./node_modules/core-js/modules/_global.js","webpack:///./node_modules/core-js/modules/_fails.js","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./node_modules/core-js/modules/_core.js","webpack:///./node_modules/core-js/modules/_object-dp.js","webpack:///./node_modules/ieee754/index.js","webpack:///./node_modules/core-js/modules/_ctx.js","webpack:///./node_modules/core-js/modules/_add-to-unscopables.js","webpack:///./node_modules/core-js/modules/_to-length.js","webpack:///./node_modules/core-js/modules/_descriptors.js","webpack:///./node_modules/jdataview/dist/node/jdataview.js","webpack:///./node_modules/buffer/index.js","webpack:///./node_modules/core-js/modules/_defined.js","webpack:///./node_modules/core-js/modules/_ie8-dom-define.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/core-js/modules/_uid.js","webpack:///./node_modules/core-js/modules/_an-object.js","webpack:///./node_modules/core-js/modules/_array-species-create.js","webpack:///./node_modules/core-js/modules/_is-object.js","webpack:///./node_modules/core-js/modules/_a-function.js","webpack:///./node_modules/total-war-save-parser/dist/total-war-save-parser.js","webpack:///./node_modules/isarray/index.js","webpack:///./node_modules/core-js/modules/_array-species-constructor.js","webpack:///./src/workers/read-sf-for-painter.worker.js","webpack:///./node_modules/core-js/modules/_function-to-string.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","LZMA","action_compress","action_decompress","action_progress","wait","setImmediate","setTimeout","__4294967296","N1_longLit","MIN_VALUE","P0_longLit","P1_longLit","update_progress","percent","cbn","postMessage","action","result","initDim","len","a","undefined","add","b","and","makeFromBits","Math","max","min","lowBits_0","compare","nega","negb","sub","valueLow","valueHigh","diffHigh","diffLow","floor","eq","fromInt","highBits","lowBits","high","low","pwrAsDouble","shl","diff","newHigh","newLow","twoToN","Error","shr","shiftFact","shru","sr","$ByteArrayInputStream","this$static","buf","pos","count","length","$read","$read_0","off","arraycopy","$ByteArrayOutputStream","$toByteArray","data","$write","$write_0","$getChars","srcBegin","srcEnd","dst","dstBegin","srcIdx","charCodeAt","src","srcOfs","dest","destOfs","$configure","encoder","$SetDictionarySize_0","_numFastBytes","f","$SetMatchFinder","_numLiteralPosStateBits","_numLiteralContextBits","_posStateBits","_posStateMask","$init","input","output","length_0","$Encoder","_writeEndMark","disableEndMark","$WriteCoderProperties","chunker","_needReleaseMFStream","_inStream","_finished","$Create_2","_rangeEncoder","Stream","$Init_4","$FillDistancesPrices","$FillAlignPrices","_lenEncoder","_tableSize","$UpdateTables","_repMatchLenEncoder","nowPos64","$Chunker_0","$LZMAByteArrayCompressor","$init_0","decoder","tmp_length","hex_length","properties","$Decoder","$SetDecoderProperties","toString","test","parseInt","$CodeInChunks","$LZMAByteArrayDecompressor","$Create_4","keepSizeBefore","keepSizeAfter","keepSizeReserv","blockSize","_keepSizeBefore","_keepSizeAfter","_bufferBase","_blockSize","_pointerToLastSafePosition","$GetIndexByte","index","_bufferOffset","_pos","$GetMatchLen","distance","limit","pby","_streamEndWasReached","_streamPos","$GetNumAvailableBytes","$MoveBlock","numBytes","offset","$MovePos_1","pointerToPostion","_posLimit","$ReadBlock","numReadBytes","size","_stream","$ReduceOffsets","subValue","CrcTable","j","$Create_3","historySize","keepAddBufferBefore","matchMaxLen","keepAddBufferAfter","cyclicBufferSize","hs","windowReservSize","_cutValue","_matchMaxLen","_cyclicBufferSize","_son","HASH_ARRAY","_hashMask","kFixHashSize","_hashSizeSum","_hash","$GetMatches","distances","cur","curMatch","curMatch2","curMatch3","cyclicPos","delta","hash2Value","hash3Value","hashValue","len0","len1","lenLimit","matchMinPos","maxLen","pby1","ptr0","ptr1","temp","kMinMatchCheck","$MovePos_0","_cyclicBufferPos","kNumHashDirectBytes","$Init_5","$NormalizeLinks","items","numItems","$SetType","numHashBytes","$Skip","num","$CopyBlock","_windowSize","_buffer","$Flush_0","$Create_5","windowSize","$GetByte","$PutByte","$ReleaseStream","GetLenToPosState","StateUpdateChar","alive","$Chunker","$processChunk","$processEncoderChunk","$processDecoderChunk","$CodeOneChunk","inBytesProcessed","outBytesProcessed","outSize","m_OutWindow","m_RangeDecoder","$CodeOneBlock","processedInSize","processedOutSize","finished","$ReleaseStreams","inStream","outStream","$Init_1","state","rep0","rep1","rep2","rep3","prevByte","decoder2","numDirectBits","posSlot","posState","m_PosStateMask","$DecodeBit","m_IsMatchDecoders","m_IsRepDecoders","m_IsRepG0Decoders","m_IsRepG1Decoders","m_IsRepG2Decoders","m_IsRep0LongDecoders","$Decode","m_RepLenDecoder","m_LenDecoder","$Decode_0","m_PosSlotDecoder","ReverseDecode","m_PosDecoders","$DecodeDirectBits","$ReverseDecode","m_PosAlignDecoder","m_DictionarySizeCheck","$GetDecoder","m_LiteralDecoder","$DecodeNormal","$DecodeWithMatchByte","$BitTreeDecoder","$Decoder$LenDecoder","InitBitModels","$Init_0","Models","$Init","$Init_8","dictionarySize","lc","lp","pb","remainder","val","$SetLcLpPb","$SetDictionarySize","m_DictionarySize","$Create_0","numPosStates","$Create","m_NumPosStates","m_LowCoder","m_MidCoder","rangeDecoder","m_Choice","symbol","m_HighCoder","numPosBits","numPrevBits","numStates","m_Coders","m_NumPrevBits","m_NumPosBits","m_PosMask","$Decoder$LiteralDecoder$Decoder2","m_Decoders","matchByte","bit","matchBit","g_FastPos","k","slotFast","$Backward","backCur","backMem","posMem","posPrev","_optimumEndIndex","_optimum","PosPrev","BackPrev","Prev1IsChar","$MakeAsChar","Prev2","PosPrev2","BackPrev2","backRes","_optimumCurrentIndex","$BaseInit","_state","_previousByte","_repDistances","inSize","baseVal","complexState","curByte","footerBits","lenToPosState","posReduced","progressPosValuePrev","subCoder","_matchFinder","$Flush","$ReadMatchDistances","$Encode_3","_isMatch","_additionalOffset","$Encode_1","$GetSubCoder","_literalEncoder","$GetOptimum","$EncodeMatched","_isRep","_isRepG0","_isRepG1","_isRepG2","_isRep0Long","$Encode_0","GetPosSlot","$Encode_2","_posSlotEncoder","ReverseEncode","_posEncoders","$EncodeDirectBits","$ReverseEncode","_posAlignEncoder","_alignPriceCount","_matchPriceCount","$GetProcessedSizeAdd","bt","_matchFinderType","$Create_1","_dictionarySize","_dictionarySizePrev","_numFastBytesPrev","$BitTreeEncoder","$Encoder$LenPriceTableEncoder","_matchDistances","_posSlotPrices","_distancesPrices","_alignPrices","reps","repLens","tempPrices","_longestMatchLength","_numDistancePairs","$ReverseGetPrice","st","st2","ReverseGetPrice","_distTableSize","$GetPrice_1","nowPos","$ReleaseMFStream","$WriteEndMarker","$ShiftLow","position","curAnd1Price","curAndLenCharPrice","curAndLenPrice","curBack","curPrice","currentByte","lenEnd","lenMain","lenRes","lenTest","lenTest2","lenTestTemp","matchPrice","newLen","nextIsChar","nextMatchPrice","nextOptimum","nextRepMatchPrice","normalMatchPrice","numAvailableBytes","numAvailableBytesFull","numDistancePairs","offs","opt","optimum","posStateNext","price_4","repIndex","repLen","repMatchPrice","repMaxIndex","shortRepPrice","startLen","state2","price","price_0","price_1","price_2","price_3","_longestMatchWasFound","$MovePos","State","Price","ProbPrices","$GetPrice_0","$GetRepLen1Price","$MakeAsShortRep","Backs0","Backs1","Backs2","Backs3","$GetPureRepPrice","$GetPrice","$GetPosLenPrice","GetPosSlot2","GetPrice","$Init_9","$Init_3","$Init_2","dicLogSize","matchFinderIndex","matchFinderIndexPrev","$Encode","rangeEncoder","_choice","_lowCoder","_midCoder","_highCoder","$Encoder$LenEncoder","$SetPrices","numSymbols","prices","a0","a1","b0","b1","_counters","_prices","$Encoder$LiteralEncoder$Encoder2","m_Encoders","context","same","matchMode","numBitLevels","NumBitLevels","bitIndex","startIndex","probs","newBound","prob","Range","Code","numTotalBits","end","start","Low","v","_cacheSize","_position","_cache","LowHi","Prob","decode","utf","x","y","z","charCodes","push","String","fromCharCode","apply","join","encode","ch","chars","elen","toDouble","compress","str","on_finish","on_progress","sync","res","err","error","get_mode_obj","do_action","Date","getTime","decompress","byte_arr","has_progress","modes","onmessage","window","document","e","this","LZMA_WORKER","ctx","IObject","toObject","toLength","asc","TYPE","$create","IS_MAP","IS_FILTER","IS_SOME","IS_EVERY","IS_FIND_INDEX","NO_HOLES","$this","callbackfn","that","O","self","cof","Array","isArray","arg","byteLength","toByteArray","fromByteArray","lookup","revLookup","Arr","Uint8Array","code","getLens","b64","validLen","indexOf","placeHoldersLen","lens","_byteLength","tmp","arr","tripletToBase64","encodeChunk","uint8","extraBytes","parts","maxChunkLength","len2","isObject","is","createElement","it","global","hide","has","SRC","$toString","TO_STRING","TPL","split","inspectSource","safe","isFunction","Function","store","uid","USE_SYMBOL","$exports","slice","dP","createDesc","ceil","isNaN","bitmap","configurable","writable","defined","core","SHARED","version","copyright","redefine","PROTOTYPE","$export","type","source","own","out","exp","IS_FORCED","F","IS_GLOBAL","G","IS_STATIC","S","IS_PROTO","P","IS_BIND","B","target","expProto","U","W","R","propertyIsEnumerable","fn","valueOf","TypeError","$find","KEY","forced","find","arguments","__g","exec","FProto","nameRE","NAME","match","__e","anObject","IE8_DOM_DEFINE","toPrimitive","Attributes","read","buffer","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","Infinity","pow","write","rt","abs","log","LN2","aFunction","UNSCOPABLES","ArrayProto","toInteger","factory","obj","Ctor","constructor","arrayFrom","arrayLike","forceCopy","defaultValue","jDataView","byteOffset","littleEndian","_littleEndian","wrapBuffer","_isArrayBuffer","compatibility","ArrayBuffer","_isPixelData","_isDataView","DataView","_isNodeBuffer","NodeBuffer","Buffer","bufferLength","_offset","_bitOffset","_view","_checkBounds","_engineAction","_dataViewAction","_nodeBufferAction","_arrayBufferAction","_arrayAction","getCharCodes","string","Type","codes","pow2","Uint64","lo","hi","Int64","PixelData","TextEncoder","TextDecoder","writeFloatLE","dataTypes","Int8","Int16","Int32","Uint8","Uint16","Uint32","Float32","Float64","fill","view","from","Number","fromNumber","number","unsigned","proto","maxLength","RangeError","_action","isReadAction","typedArray","TypedArray","bytes","getBytes","_setBytes","_getBytes","reverse","toArray","set","copy","setBytes","getString","encoding","decodeURIComponent","escape","setString","subString","unescape","encodeURIComponent","getChar","setChar","character","tell","seek","skip","normalizeOffset","alignBy","byteCount","_getFloat64","sign","exponent","mantissa","_getFloat32","_get64","getUint32","getInt64","getUint64","_getInt32","_getUint32","_getInt16","_getUint16","_getInt8","_getUint8","_getBitRangeData","bitLength","startBit","endBit","wideValue","getSigned","shift","getUnsigned","_setBinaryFloat","mantSize","expSize","signBit","eMin","_setFloat32","_setFloat64","_set64","partName","setUint32","setInt64","setUint64","_setUint32","_setUint16","_setUint8","setUnsigned","nodeNaming","nodeName","method","_setInt32","_setInt16","_setInt8","setSigned","unshift","base64","ieee754","typedArraySupport","__proto__","foo","subarray","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","encodingOrOffset","allocUnsafe","fromArrayBuffer","fromString","fromObject","assertSize","alloc","checked","isEncoding","actual","fromArrayLike","array","isBuffer","isnan","SlowBuffer","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","decodeCodePointsArray","INSPECT_MAX_BYTES","poolSize","_augment","species","allocUnsafeSlow","_isBuffer","concat","list","swap16","swap32","swap64","equals","inspect","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","MAX_ARGUMENTS_LENGTH","codePoints","ret","toHex","checkOffset","ext","checkInt","objectWriteUInt16","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","maxBytes","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","INVALID_BASE64_RE","base64clean","stringtrim","replace","trim","units","leadSurrogate","byteArray","g","id","px","random","speciesConstructor","original","JDataView","TwsType","ArrayNode","typeCode","reader","UINT32_BYTE_ARRAY","UINT32_SHORT_ARRAY","UINT32_24BIT_ARRAY","INT32_24BIT_ARRAY","INT32_BYTE_ARRAY","INT32_SHORT_ARRAY","UINT8_ARRAY","UINT32_ARRAY","UINT64_ARRAY","ASCII_ARRAY","UTF16_ARRAY","COORD2D_ARRAY","UINT16_ARRAY","INT8_ARRAY","SINGLE_ARRAY","BOOL_ARRAY","INT32_ARRAY","readArray","INT16_ARRAY","INT64_ARRAY","DOUBLE_ARRAY","COORD3D_ARRAY","ANGLE_ARRAY","BOOL_TRUE_ARRAY","BOOL_FALSE_ARRAY","UINT_ZERO_ARRAY","UINT_ONE_ARRAY","INT32_ZERO_ARRAY","SINGLE_ZERO_ARRAY","readSize","containedTypeCode","elements","node","readValueNode","CompressedNode","compressedNode","values","infoNode","decodeProperties","readCompressed","TAG_NAME","INFO_TAG","Coordinate2dNode","readFloat32","Coordinate3dNode","OptimizedBoolNode","BOOL","readUint8","BOOL_TRUE","BOOL_FALSE","OptimizedFloatNode","SINGLE_ZERO","OptimizedIntNode","singleByteMin","INT32_ZERO","INT32_BYTE","INT32_SHORT","readInt16","INT32_24BIT","readInt24","INT32","readInt32","OptimizedUintNode","UINT32_ZERO","UINT32_ONE","UINT32_BYTE","UINT32_SHORT","readUint16","UINT32_24BIT","readUint24","UINT32","readUint32","RecordEntryNode","readToOffset","console","RecordArrayNode","recordInfo","readRecordInfo","itemCount","containedNodes","contained","RecordNode","TwsHeader","unknown1","editTime","Type26","readBytes","UTF8_DECODER","UTF16_DECODER","TwsReader","dataView","Int8Array","header","stringValues","readStringArrays","nodeNames","utf16Strings","asciiStrings","readTypeCode","rootNode","targetOffset","encoded","HEADER_LENGTH","LONG_INFO","nameIndex","getNodeName","recordBit","RECORD_BIT","blockBit","BLOCK_BIT","readNode","RECORD","RECORD_BLOCK","optimize","readValue","INT8","INT16","INT64","readInt64","UINT8","UINT16","UINT64","readUint64","SINGLE","DOUBLE","COORD2D","COORD3D","UTF16","lookupString","UNKNOWN_23","buffer23","UNKNOWN_24","buffer24","UNKNOWN_26","ASCII","ASCII_W21","ASCII_W25","ANGLE","strings","refId","nodeNamesOffset","restorePosition","nodeNamesLength","map","readStringUtf8","readStringList","readStringUtf16","readString","ref","getInt8","getInt16","getInt32","getUint8","getUint16","getFloat32","sizeAsBytes","compressed","readAll","SPECIES","C","addEventListener","event","TwsParser","regionsArray","regions_owners","entry","region","regionKey","regionOwnerIndex","factionArray","active_factions","faction","factionKey","reduce","accumulator","af","success"],"mappings":"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","file":"b99216797eb64650fc6a.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/tww-interactive-map/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"f272\");\n","/// © 2015 Nathan Rugg <nmrugg@gmail.com> | MIT\n/// See LICENSE for more details.\n\n/* jshint noarg:true, boss:true, unused:strict, strict:true, undef:true, noarg: true, forin:true, evil:true, newcap:false, -W041, -W021, worker:true, browser:true, node:true */\n\n/* global setImmediate, setTimeout, window, onmessage */\n\n/** xs */\n///NOTE: This is the master file that is used to generate lzma-c.js and lzma-d.js.\n///      Comments are used to determine which parts are to be removed.\n///\n/// cs-ce (compression start-end)\n/// ds-de (decompression start-end)\n/// xs-xe (only in this file start-end)\n/// co    (compression only)\n/// do    (decompression only)\n/** xe */\n\nvar LZMA = (function () {\n    \n    \"use strict\";\n    \n    var /** cs */\n        action_compress   = 1,\n        /** ce */\n        /** ds */\n        action_decompress = 2,\n        /** de */\n        action_progress   = 3,\n        wait = typeof setImmediate == \"function\" ? setImmediate : setTimeout,\n        __4294967296 = 4294967296,\n        N1_longLit = [4294967295, -__4294967296],\n        /** cs */\n        MIN_VALUE = [0, -9223372036854775808],\n        /** ce */\n        P0_longLit = [0, 0],\n        P1_longLit = [1, 0];\n    \n    function update_progress(percent, cbn) {\n        postMessage({\n            action: action_progress,\n            cbn: cbn,\n            result: percent\n        });\n    }\n    \n    function initDim(len) {\n        ///NOTE: This is MUCH faster than \"new Array(len)\" in newer versions of v8 (starting with Node.js 0.11.15, which uses v8 3.28.73).\n        var a = [];\n        a[len - 1] = undefined;\n        return a;\n    }\n    \n    function add(a, b) {\n        return create(a[0] + b[0], a[1] + b[1]);\n    }\n    \n    /** cs */\n    function and(a, b) {\n        return makeFromBits(~~Math.max(Math.min(a[1] / __4294967296, 2147483647), -2147483648) & ~~Math.max(Math.min(b[1] / __4294967296, 2147483647), -2147483648), lowBits_0(a) & lowBits_0(b));\n    }\n    /** ce */\n    \n    function compare(a, b) {\n        var nega, negb;\n        if (a[0] == b[0] && a[1] == b[1]) {\n            return 0;\n        }\n        nega = a[1] < 0;\n        negb = b[1] < 0;\n        if (nega && !negb) {\n            return -1;\n        }\n        if (!nega && negb) {\n            return 1;\n        }\n        if (sub(a, b)[1] < 0) {\n            return -1;\n        }\n        return 1;\n    }\n    \n    function create(valueLow, valueHigh) {\n        var diffHigh, diffLow;\n        valueHigh %= 1.8446744073709552E19;\n        valueLow %= 1.8446744073709552E19;\n        diffHigh = valueHigh % __4294967296;\n        diffLow = Math.floor(valueLow / __4294967296) * __4294967296;\n        valueHigh = valueHigh - diffHigh + diffLow;\n        valueLow = valueLow - diffLow + diffHigh;\n        while (valueLow < 0) {\n            valueLow += __4294967296;\n            valueHigh -= __4294967296;\n        }\n        while (valueLow > 4294967295) {\n            valueLow -= __4294967296;\n            valueHigh += __4294967296;\n        }\n        valueHigh = valueHigh % 1.8446744073709552E19;\n        while (valueHigh > 9223372032559808512) {\n            valueHigh -= 1.8446744073709552E19;\n        }\n        while (valueHigh < -9223372036854775808) {\n            valueHigh += 1.8446744073709552E19;\n        }\n        return [valueLow, valueHigh];\n    }\n    \n    /** cs */\n    function eq(a, b) {\n        return a[0] == b[0] && a[1] == b[1];\n    }\n    /** ce */\n    function fromInt(value) {\n        if (value >= 0) {\n            return [value, 0];\n        } else {\n            return [value + __4294967296, -__4294967296];\n        }\n    }\n    \n    function lowBits_0(a) {\n        if (a[0] >= 2147483648) {\n            return ~~Math.max(Math.min(a[0] - __4294967296, 2147483647), -2147483648);\n        } else {\n            return ~~Math.max(Math.min(a[0], 2147483647), -2147483648);\n        }\n    }\n    /** cs */\n    function makeFromBits(highBits, lowBits) {\n        var high, low;\n        high = highBits * __4294967296;\n        low = lowBits;\n        if (lowBits < 0) {\n            low += __4294967296;\n        }\n        return [low, high];\n    }\n    \n    function pwrAsDouble(n) {\n        if (n <= 30) {\n            return 1 << n;\n        } else {\n            return pwrAsDouble(30) * pwrAsDouble(n - 30);\n        }\n    }\n    \n    function shl(a, n) {\n        var diff, newHigh, newLow, twoToN;\n        n &= 63;\n        if (eq(a, MIN_VALUE)) {\n            if (!n) {\n                return a;\n            }\n            return P0_longLit;\n        }\n        if (a[1] < 0) {\n            throw new Error(\"Neg\");\n        }\n        twoToN = pwrAsDouble(n);\n        newHigh = a[1] * twoToN % 1.8446744073709552E19;\n        newLow = a[0] * twoToN;\n        diff = newLow - newLow % __4294967296;\n        newHigh += diff;\n        newLow -= diff;\n        if (newHigh >= 9223372036854775807) {\n            newHigh -= 1.8446744073709552E19;\n        }\n        return [newLow, newHigh];\n    }\n    \n    function shr(a, n) {\n        var shiftFact;\n        n &= 63;\n        shiftFact = pwrAsDouble(n);\n        return create(Math.floor(a[0] / shiftFact), a[1] / shiftFact);\n    }\n    \n    function shru(a, n) {\n        var sr;\n        n &= 63;\n        sr = shr(a, n);\n        if (a[1] < 0) {\n            sr = add(sr, shl([2, 0], 63 - n));\n        }\n        return sr;\n    }\n    \n    /** ce */\n    \n    function sub(a, b) {\n        return create(a[0] - b[0], a[1] - b[1]);\n    }\n    \n    function $ByteArrayInputStream(this$static, buf) {\n        this$static.buf = buf;\n        this$static.pos = 0;\n        this$static.count = buf.length;\n        return this$static;\n    }\n    \n    /** ds */\n    function $read(this$static) {\n        if (this$static.pos >= this$static.count)\n            return -1;\n        return this$static.buf[this$static.pos++] & 255;\n    }\n    /** de */\n    /** cs */\n    function $read_0(this$static, buf, off, len) {\n        if (this$static.pos >= this$static.count)\n            return -1;\n        len = Math.min(len, this$static.count - this$static.pos);\n        arraycopy(this$static.buf, this$static.pos, buf, off, len);\n        this$static.pos += len;\n        return len;\n    }\n    /** ce */\n    \n    function $ByteArrayOutputStream(this$static) {\n        this$static.buf = initDim(32);\n        this$static.count = 0;\n        return this$static;\n    }\n    \n    function $toByteArray(this$static) {\n        var data = this$static.buf;\n        data.length = this$static.count;\n        return data;\n    }\n    \n    /** cs */\n    function $write(this$static, b) {\n        this$static.buf[this$static.count++] = b << 24 >> 24;\n    }\n    /** ce */\n    \n    function $write_0(this$static, buf, off, len) {\n        arraycopy(buf, off, this$static.buf, this$static.count, len);\n        this$static.count += len;\n    }\n    \n    /** cs */\n    function $getChars(this$static, srcBegin, srcEnd, dst, dstBegin) {\n        var srcIdx;\n        for (srcIdx = srcBegin; srcIdx < srcEnd; ++srcIdx) {\n            dst[dstBegin++] = this$static.charCodeAt(srcIdx);\n        }\n    }\n    /** ce */\n    \n    function arraycopy(src, srcOfs, dest, destOfs, len) {\n        for (var i = 0; i < len; ++i) {\n            dest[destOfs + i] = src[srcOfs + i];\n        }\n    }\n    \n    /** cs */\n    function $configure(this$static, encoder) {\n        $SetDictionarySize_0(encoder, 1 << this$static.s);\n        encoder._numFastBytes = this$static.f;\n        $SetMatchFinder(encoder, this$static.m);\n        \n        /// lc is always 3\n        /// lp is always 0\n        /// pb is always 2\n        encoder._numLiteralPosStateBits = 0;\n        encoder._numLiteralContextBits = 3;\n        encoder._posStateBits = 2;\n        ///this$static._posStateMask = (1 << pb) - 1;\n        encoder._posStateMask = 3;\n    }\n    \n    function $init(this$static, input, output, length_0, mode) {\n        var encoder, i;\n        if (compare(length_0, N1_longLit) < 0)\n            throw new Error(\"invalid length \" + length_0);\n        this$static.length_0 = length_0;\n        encoder = $Encoder({});\n        $configure(mode, encoder);\n        encoder._writeEndMark = typeof LZMA.disableEndMark == \"undefined\";\n        $WriteCoderProperties(encoder, output);\n        for (i = 0; i < 64; i += 8)\n            $write(output, lowBits_0(shr(length_0, i)) & 255);\n        this$static.chunker = (encoder._needReleaseMFStream = 0 , (encoder._inStream = input , encoder._finished = 0 , $Create_2(encoder) , encoder._rangeEncoder.Stream = output , $Init_4(encoder) , $FillDistancesPrices(encoder) , $FillAlignPrices(encoder) , encoder._lenEncoder._tableSize = encoder._numFastBytes + 1 - 2 , $UpdateTables(encoder._lenEncoder, 1 << encoder._posStateBits) , encoder._repMatchLenEncoder._tableSize = encoder._numFastBytes + 1 - 2 , $UpdateTables(encoder._repMatchLenEncoder, 1 << encoder._posStateBits) , encoder.nowPos64 = P0_longLit , undefined) , $Chunker_0({}, encoder));\n    }\n    \n    function $LZMAByteArrayCompressor(this$static, data, mode) {\n        this$static.output = $ByteArrayOutputStream({});\n        $init(this$static, $ByteArrayInputStream({}, data), this$static.output, fromInt(data.length), mode);\n        return this$static;\n    }\n    /** ce */\n    \n    /** ds */\n    function $init_0(this$static, input, output) {\n        var decoder,\n            hex_length = \"\",\n            i,\n            properties = [],\n            r,\n            tmp_length;\n        \n        for (i = 0; i < 5; ++i) {\n            r = $read(input);\n            if (r == -1)\n                throw new Error(\"truncated input\");\n            properties[i] = r << 24 >> 24;\n        }\n        \n        decoder = $Decoder({});\n        if (!$SetDecoderProperties(decoder, properties)) {\n            throw new Error(\"corrupted input\");\n        }\n        for (i = 0; i < 64; i += 8) {\n            r = $read(input);\n            if (r == -1)\n                throw new Error(\"truncated input\");\n            r = r.toString(16);\n            if (r.length == 1) r = \"0\" + r;\n            hex_length = r + \"\" + hex_length;\n        }\n        \n        /// Was the length set in the header (if it was compressed from a stream, the length is all f\"s).\n        if (/^0+$|^f+$/i.test(hex_length)) {\n            /// The length is unknown, so set to -1.\n            this$static.length_0 = N1_longLit;\n        } else {\n            ///NOTE: If there is a problem with the decoder because of the length, you can always set the length to -1 (N1_longLit) which means unknown.\n            tmp_length = parseInt(hex_length, 16);\n            /// If the length is too long to handle, just set it to unknown.\n            if (tmp_length > 4294967295) {\n                this$static.length_0 = N1_longLit;\n            } else {\n                this$static.length_0 = fromInt(tmp_length);\n            }\n        }\n        \n        this$static.chunker = $CodeInChunks(decoder, input, output, this$static.length_0);\n    }\n    \n    function $LZMAByteArrayDecompressor(this$static, data) {\n        this$static.output = $ByteArrayOutputStream({});\n        $init_0(this$static, $ByteArrayInputStream({}, data), this$static.output);\n        return this$static;\n    }\n    /** de */\n    /** cs */\n    function $Create_4(this$static, keepSizeBefore, keepSizeAfter, keepSizeReserv) {\n        var blockSize;\n        this$static._keepSizeBefore = keepSizeBefore;\n        this$static._keepSizeAfter = keepSizeAfter;\n        blockSize = keepSizeBefore + keepSizeAfter + keepSizeReserv;\n        if (this$static._bufferBase == null || this$static._blockSize != blockSize) {\n            this$static._bufferBase = null;\n            this$static._blockSize = blockSize;\n            this$static._bufferBase = initDim(this$static._blockSize);\n        }\n        this$static._pointerToLastSafePosition = this$static._blockSize - keepSizeAfter;\n    }\n    \n    function $GetIndexByte(this$static, index) {\n        return this$static._bufferBase[this$static._bufferOffset + this$static._pos + index];\n    }\n    \n    function $GetMatchLen(this$static, index, distance, limit) {\n        var i, pby;\n        if (this$static._streamEndWasReached) {\n            if (this$static._pos + index + limit > this$static._streamPos) {\n                limit = this$static._streamPos - (this$static._pos + index);\n            }\n        }\n        ++distance;\n        pby = this$static._bufferOffset + this$static._pos + index;\n        for (i = 0; i < limit && this$static._bufferBase[pby + i] == this$static._bufferBase[pby + i - distance]; ++i) {\n        }\n        return i;\n    }\n    \n    function $GetNumAvailableBytes(this$static) {\n        return this$static._streamPos - this$static._pos;\n    }\n    \n    function $MoveBlock(this$static) {\n        var i, numBytes, offset;\n        offset = this$static._bufferOffset + this$static._pos - this$static._keepSizeBefore;\n        if (offset > 0) {\n            --offset;\n        }\n        numBytes = this$static._bufferOffset + this$static._streamPos - offset;\n        for (i = 0; i < numBytes; ++i) {\n            this$static._bufferBase[i] = this$static._bufferBase[offset + i];\n        }\n        this$static._bufferOffset -= offset;\n    }\n    \n    function $MovePos_1(this$static) {\n        var pointerToPostion;\n        ++this$static._pos;\n        if (this$static._pos > this$static._posLimit) {\n            pointerToPostion = this$static._bufferOffset + this$static._pos;\n            if (pointerToPostion > this$static._pointerToLastSafePosition) {\n                $MoveBlock(this$static);\n            }\n            $ReadBlock(this$static);\n        }\n    }\n    \n    function $ReadBlock(this$static) {\n        var numReadBytes, pointerToPostion, size;\n        if (this$static._streamEndWasReached)\n            return;\n        while (1) {\n            size = -this$static._bufferOffset + this$static._blockSize - this$static._streamPos;\n            if (!size)\n                return;\n            numReadBytes = $read_0(this$static._stream, this$static._bufferBase, this$static._bufferOffset + this$static._streamPos, size);\n            if (numReadBytes == -1) {\n                this$static._posLimit = this$static._streamPos;\n                pointerToPostion = this$static._bufferOffset + this$static._posLimit;\n                if (pointerToPostion > this$static._pointerToLastSafePosition) {\n                    this$static._posLimit = this$static._pointerToLastSafePosition - this$static._bufferOffset;\n                }\n                this$static._streamEndWasReached = 1;\n                return;\n            }\n            this$static._streamPos += numReadBytes;\n            if (this$static._streamPos >= this$static._pos + this$static._keepSizeAfter) {\n                this$static._posLimit = this$static._streamPos - this$static._keepSizeAfter;\n            }\n        }\n    }\n    \n    function $ReduceOffsets(this$static, subValue) {\n        this$static._bufferOffset += subValue;\n        this$static._posLimit -= subValue;\n        this$static._pos -= subValue;\n        this$static._streamPos -= subValue;\n    }\n    \n    var CrcTable = (function () {\n        var i, j, r, CrcTable = [];\n        for (i = 0; i < 256; ++i) {\n            r = i;\n            for (j = 0; j < 8; ++j)\n            if ((r & 1) != 0) {\n                r = r >>> 1 ^ -306674912;\n            } else {\n                r >>>= 1;\n            }\n            CrcTable[i] = r;\n        }\n        return CrcTable;\n    }());\n    \n    function $Create_3(this$static, historySize, keepAddBufferBefore, matchMaxLen, keepAddBufferAfter) {\n        var cyclicBufferSize, hs, windowReservSize;\n        if (historySize < 1073741567) {\n            this$static._cutValue = 16 + (matchMaxLen >> 1);\n            windowReservSize = ~~((historySize + keepAddBufferBefore + matchMaxLen + keepAddBufferAfter) / 2) + 256;\n            $Create_4(this$static, historySize + keepAddBufferBefore, matchMaxLen + keepAddBufferAfter, windowReservSize);\n            this$static._matchMaxLen = matchMaxLen;\n            cyclicBufferSize = historySize + 1;\n            if (this$static._cyclicBufferSize != cyclicBufferSize) {\n                this$static._son = initDim((this$static._cyclicBufferSize = cyclicBufferSize) * 2);\n            }\n    \n            hs = 65536;\n            if (this$static.HASH_ARRAY) {\n                hs = historySize - 1;\n                hs |= hs >> 1;\n                hs |= hs >> 2;\n                hs |= hs >> 4;\n                hs |= hs >> 8;\n                hs >>= 1;\n                hs |= 65535;\n                if (hs > 16777216)\n                hs >>= 1;\n                this$static._hashMask = hs;\n                ++hs;\n                hs += this$static.kFixHashSize;\n            }\n            \n            if (hs != this$static._hashSizeSum) {\n                this$static._hash = initDim(this$static._hashSizeSum = hs);\n            }\n        }\n    }\n    \n    function $GetMatches(this$static, distances) {\n        var count, cur, curMatch, curMatch2, curMatch3, cyclicPos, delta, hash2Value, hash3Value, hashValue, len, len0, len1, lenLimit, matchMinPos, maxLen, offset, pby1, ptr0, ptr1, temp;\n        if (this$static._pos + this$static._matchMaxLen <= this$static._streamPos) {\n            lenLimit = this$static._matchMaxLen;\n        } else {\n            lenLimit = this$static._streamPos - this$static._pos;\n            if (lenLimit < this$static.kMinMatchCheck) {\n                $MovePos_0(this$static);\n                return 0;\n            }\n        }\n        offset = 0;\n        matchMinPos = this$static._pos > this$static._cyclicBufferSize?this$static._pos - this$static._cyclicBufferSize:0;\n        cur = this$static._bufferOffset + this$static._pos;\n        maxLen = 1;\n        hash2Value = 0;\n        hash3Value = 0;\n        if (this$static.HASH_ARRAY) {\n            temp = CrcTable[this$static._bufferBase[cur] & 255] ^ this$static._bufferBase[cur + 1] & 255;\n            hash2Value = temp & 1023;\n            temp ^= (this$static._bufferBase[cur + 2] & 255) << 8;\n            hash3Value = temp & 65535;\n            hashValue = (temp ^ CrcTable[this$static._bufferBase[cur + 3] & 255] << 5) & this$static._hashMask;\n        } else {\n            hashValue = this$static._bufferBase[cur] & 255 ^ (this$static._bufferBase[cur + 1] & 255) << 8;\n        }\n\n        curMatch = this$static._hash[this$static.kFixHashSize + hashValue] || 0;\n        if (this$static.HASH_ARRAY) {\n            curMatch2 = this$static._hash[hash2Value] || 0;\n            curMatch3 = this$static._hash[1024 + hash3Value] || 0;\n            this$static._hash[hash2Value] = this$static._pos;\n            this$static._hash[1024 + hash3Value] = this$static._pos;\n            if (curMatch2 > matchMinPos) {\n                if (this$static._bufferBase[this$static._bufferOffset + curMatch2] == this$static._bufferBase[cur]) {\n                    distances[offset++] = maxLen = 2;\n                    distances[offset++] = this$static._pos - curMatch2 - 1;\n                }\n            }\n            if (curMatch3 > matchMinPos) {\n                if (this$static._bufferBase[this$static._bufferOffset + curMatch3] == this$static._bufferBase[cur]) {\n                    if (curMatch3 == curMatch2) {\n                        offset -= 2;\n                    }\n                    distances[offset++] = maxLen = 3;\n                    distances[offset++] = this$static._pos - curMatch3 - 1;\n                    curMatch2 = curMatch3;\n                }\n            }\n            if (offset != 0 && curMatch2 == curMatch) {\n                offset -= 2;\n                maxLen = 1;\n            }\n        }\n        this$static._hash[this$static.kFixHashSize + hashValue] = this$static._pos;\n        ptr0 = (this$static._cyclicBufferPos << 1) + 1;\n        ptr1 = this$static._cyclicBufferPos << 1;\n        len0 = len1 = this$static.kNumHashDirectBytes;\n        if (this$static.kNumHashDirectBytes != 0) {\n            if (curMatch > matchMinPos) {\n                if (this$static._bufferBase[this$static._bufferOffset + curMatch + this$static.kNumHashDirectBytes] != this$static._bufferBase[cur + this$static.kNumHashDirectBytes]) {\n                    distances[offset++] = maxLen = this$static.kNumHashDirectBytes;\n                    distances[offset++] = this$static._pos - curMatch - 1;\n                }\n            }\n        }\n        count = this$static._cutValue;\n        while (1) {\n            if (curMatch <= matchMinPos || count-- == 0) {\n                this$static._son[ptr0] = this$static._son[ptr1] = 0;\n                break;\n            }\n            delta = this$static._pos - curMatch;\n            cyclicPos = (delta <= this$static._cyclicBufferPos?this$static._cyclicBufferPos - delta:this$static._cyclicBufferPos - delta + this$static._cyclicBufferSize) << 1;\n            pby1 = this$static._bufferOffset + curMatch;\n            len = len0 < len1?len0:len1;\n            if (this$static._bufferBase[pby1 + len] == this$static._bufferBase[cur + len]) {\n                while (++len != lenLimit) {\n                    if (this$static._bufferBase[pby1 + len] != this$static._bufferBase[cur + len]) {\n                        break;\n                    }\n                }\n                if (maxLen < len) {\n                    distances[offset++] = maxLen = len;\n                    distances[offset++] = delta - 1;\n                    if (len == lenLimit) {\n                    this$static._son[ptr1] = this$static._son[cyclicPos];\n                    this$static._son[ptr0] = this$static._son[cyclicPos + 1];\n                    break;\n                    }\n                }\n            }\n            if ((this$static._bufferBase[pby1 + len] & 255) < (this$static._bufferBase[cur + len] & 255)) {\n                this$static._son[ptr1] = curMatch;\n                ptr1 = cyclicPos + 1;\n                curMatch = this$static._son[ptr1];\n                len1 = len;\n            } else {\n                this$static._son[ptr0] = curMatch;\n                ptr0 = cyclicPos;\n                curMatch = this$static._son[ptr0];\n                len0 = len;\n            }\n        }\n        $MovePos_0(this$static);\n        return offset;\n    }\n    \n    function $Init_5(this$static) {\n        this$static._bufferOffset = 0;\n        this$static._pos = 0;\n        this$static._streamPos = 0;\n        this$static._streamEndWasReached = 0;\n        $ReadBlock(this$static);\n        this$static._cyclicBufferPos = 0;\n        $ReduceOffsets(this$static, -1);\n    }\n    \n    function $MovePos_0(this$static) {\n        var subValue;\n        if (++this$static._cyclicBufferPos >= this$static._cyclicBufferSize) {\n            this$static._cyclicBufferPos = 0;\n        }\n        $MovePos_1(this$static);\n        if (this$static._pos == 1073741823) {\n            subValue = this$static._pos - this$static._cyclicBufferSize;\n            $NormalizeLinks(this$static._son, this$static._cyclicBufferSize * 2, subValue);\n            $NormalizeLinks(this$static._hash, this$static._hashSizeSum, subValue);\n            $ReduceOffsets(this$static, subValue);\n        }\n    }\n    \n    ///NOTE: This is only called after reading one whole gigabyte.\n    function $NormalizeLinks(items, numItems, subValue) {\n        var i, value;\n        for (i = 0; i < numItems; ++i) {\n            value = items[i] || 0;\n            if (value <= subValue) {\n                value = 0;\n            } else {\n                value -= subValue;\n            }\n            items[i] = value;\n        }\n    }\n    \n    function $SetType(this$static, numHashBytes) {\n        this$static.HASH_ARRAY = numHashBytes > 2;\n        if (this$static.HASH_ARRAY) {\n            this$static.kNumHashDirectBytes = 0;\n            this$static.kMinMatchCheck = 4;\n            this$static.kFixHashSize = 66560;\n        } else {\n            this$static.kNumHashDirectBytes = 2;\n            this$static.kMinMatchCheck = 3;\n            this$static.kFixHashSize = 0;\n        }\n    }\n    \n    function $Skip(this$static, num) {\n        var count, cur, curMatch, cyclicPos, delta, hash2Value, hash3Value, hashValue, len, len0, len1, lenLimit, matchMinPos, pby1, ptr0, ptr1, temp;\n        do {\n            if (this$static._pos + this$static._matchMaxLen <= this$static._streamPos) {\n                lenLimit = this$static._matchMaxLen;\n            } else {\n                lenLimit = this$static._streamPos - this$static._pos;\n                if (lenLimit < this$static.kMinMatchCheck) {\n                    $MovePos_0(this$static);\n                    continue;\n                }\n            }\n            matchMinPos = this$static._pos > this$static._cyclicBufferSize?this$static._pos - this$static._cyclicBufferSize:0;\n            cur = this$static._bufferOffset + this$static._pos;\n            if (this$static.HASH_ARRAY) {\n                temp = CrcTable[this$static._bufferBase[cur] & 255] ^ this$static._bufferBase[cur + 1] & 255;\n                hash2Value = temp & 1023;\n                this$static._hash[hash2Value] = this$static._pos;\n                temp ^= (this$static._bufferBase[cur + 2] & 255) << 8;\n                hash3Value = temp & 65535;\n                this$static._hash[1024 + hash3Value] = this$static._pos;\n                hashValue = (temp ^ CrcTable[this$static._bufferBase[cur + 3] & 255] << 5) & this$static._hashMask;\n            } else {\n                hashValue = this$static._bufferBase[cur] & 255 ^ (this$static._bufferBase[cur + 1] & 255) << 8;\n            }\n            curMatch = this$static._hash[this$static.kFixHashSize + hashValue];\n            this$static._hash[this$static.kFixHashSize + hashValue] = this$static._pos;\n            ptr0 = (this$static._cyclicBufferPos << 1) + 1;\n            ptr1 = this$static._cyclicBufferPos << 1;\n            len0 = len1 = this$static.kNumHashDirectBytes;\n            count = this$static._cutValue;\n            while (1) {\n                if (curMatch <= matchMinPos || count-- == 0) {\n                    this$static._son[ptr0] = this$static._son[ptr1] = 0;\n                    break;\n                }\n                delta = this$static._pos - curMatch;\n                cyclicPos = (delta <= this$static._cyclicBufferPos?this$static._cyclicBufferPos - delta:this$static._cyclicBufferPos - delta + this$static._cyclicBufferSize) << 1;\n                pby1 = this$static._bufferOffset + curMatch;\n                len = len0 < len1?len0:len1;\n                if (this$static._bufferBase[pby1 + len] == this$static._bufferBase[cur + len]) {\n                    while (++len != lenLimit) {\n                        if (this$static._bufferBase[pby1 + len] != this$static._bufferBase[cur + len]) {\n                            break;\n                        }\n                    }\n                    if (len == lenLimit) {\n                        this$static._son[ptr1] = this$static._son[cyclicPos];\n                        this$static._son[ptr0] = this$static._son[cyclicPos + 1];\n                        break;\n                    }\n                }\n                if ((this$static._bufferBase[pby1 + len] & 255) < (this$static._bufferBase[cur + len] & 255)) {\n                    this$static._son[ptr1] = curMatch;\n                    ptr1 = cyclicPos + 1;\n                    curMatch = this$static._son[ptr1];\n                    len1 = len;\n                } else {\n                    this$static._son[ptr0] = curMatch;\n                    ptr0 = cyclicPos;\n                    curMatch = this$static._son[ptr0];\n                    len0 = len;\n                }\n            }\n            $MovePos_0(this$static);\n        }\n        while (--num != 0);\n    }\n    \n    /** ce */\n    /** ds */\n    function $CopyBlock(this$static, distance, len) {\n        var pos = this$static._pos - distance - 1;\n        if (pos < 0) {\n            pos += this$static._windowSize;\n        }\n        for (; len != 0; --len) {\n            if (pos >= this$static._windowSize) {\n                pos = 0;\n            }\n            this$static._buffer[this$static._pos++] = this$static._buffer[pos++];\n            if (this$static._pos >= this$static._windowSize) {\n                $Flush_0(this$static);\n            }\n        }\n    }\n    \n    function $Create_5(this$static, windowSize) {\n        if (this$static._buffer == null || this$static._windowSize != windowSize) {\n            this$static._buffer = initDim(windowSize);\n        }\n        this$static._windowSize = windowSize;\n        this$static._pos = 0;\n        this$static._streamPos = 0;\n    }\n    \n    function $Flush_0(this$static) {\n        var size = this$static._pos - this$static._streamPos;\n        if (!size) {\n            return;\n        }\n        $write_0(this$static._stream, this$static._buffer, this$static._streamPos, size);\n        if (this$static._pos >= this$static._windowSize) {\n            this$static._pos = 0;\n        }\n        this$static._streamPos = this$static._pos;\n    }\n    \n    function $GetByte(this$static, distance) {\n        var pos = this$static._pos - distance - 1;\n        if (pos < 0) {\n            pos += this$static._windowSize;\n        }\n        return this$static._buffer[pos];\n    }\n    \n    function $PutByte(this$static, b) {\n        this$static._buffer[this$static._pos++] = b;\n        if (this$static._pos >= this$static._windowSize) {\n            $Flush_0(this$static);\n        }\n    }\n    \n    function $ReleaseStream(this$static) {\n        $Flush_0(this$static);\n        this$static._stream = null;\n    }\n    /** de */\n    \n    function GetLenToPosState(len) {\n        len -= 2;\n        if (len < 4) {\n            return len;\n        }\n        return 3;\n    }\n    \n    function StateUpdateChar(index) {\n        if (index < 4) {\n            return 0;\n        }\n        if (index < 10) {\n            return index - 3;\n        }\n        return index - 6;\n    }\n    \n    /** cs */\n    function $Chunker_0(this$static, encoder) {\n        this$static.encoder = encoder;\n        this$static.decoder = null;\n        this$static.alive = 1;\n        return this$static;\n    }\n    /** ce */\n    /** ds */\n    function $Chunker(this$static, decoder) {\n        this$static.decoder = decoder;\n        this$static.encoder = null;\n        this$static.alive = 1;\n        return this$static;\n    }\n    /** de */\n    \n    function $processChunk(this$static) {\n        if (!this$static.alive) {\n            throw new Error(\"bad state\");\n        }\n        \n        if (this$static.encoder) {\n            /// do:throw new Error(\"No encoding\");\n            /** cs */\n            $processEncoderChunk(this$static);\n            /** ce */\n        } else {\n            /// co:throw new Error(\"No decoding\");\n            /** ds */\n            $processDecoderChunk(this$static);\n            /** de */\n        }\n        return this$static.alive;\n    }\n    \n    /** ds */\n    function $processDecoderChunk(this$static) {\n        var result = $CodeOneChunk(this$static.decoder);\n        if (result == -1) {\n            throw new Error(\"corrupted input\");\n        }\n        this$static.inBytesProcessed = N1_longLit;\n        this$static.outBytesProcessed = this$static.decoder.nowPos64;\n        if (result || compare(this$static.decoder.outSize, P0_longLit) >= 0 && compare(this$static.decoder.nowPos64, this$static.decoder.outSize) >= 0) {\n            $Flush_0(this$static.decoder.m_OutWindow);\n            $ReleaseStream(this$static.decoder.m_OutWindow);\n            this$static.decoder.m_RangeDecoder.Stream = null;\n            this$static.alive = 0;\n        }\n    }\n    /** de */\n    /** cs */\n    function $processEncoderChunk(this$static) {\n        $CodeOneBlock(this$static.encoder, this$static.encoder.processedInSize, this$static.encoder.processedOutSize, this$static.encoder.finished);\n        this$static.inBytesProcessed = this$static.encoder.processedInSize[0];\n        if (this$static.encoder.finished[0]) {\n            $ReleaseStreams(this$static.encoder);\n            this$static.alive = 0;\n        }\n    }\n    /** ce */\n    \n    /** ds */\n    function $CodeInChunks(this$static, inStream, outStream, outSize) {\n        this$static.m_RangeDecoder.Stream = inStream;\n        $ReleaseStream(this$static.m_OutWindow);\n        this$static.m_OutWindow._stream = outStream;\n        $Init_1(this$static);\n        this$static.state = 0;\n        this$static.rep0 = 0;\n        this$static.rep1 = 0;\n        this$static.rep2 = 0;\n        this$static.rep3 = 0;\n        this$static.outSize = outSize;\n        this$static.nowPos64 = P0_longLit;\n        this$static.prevByte = 0;\n        return $Chunker({}, this$static);\n    }\n    \n    function $CodeOneChunk(this$static) {\n        var decoder2, distance, len, numDirectBits, posSlot, posState;\n        posState = lowBits_0(this$static.nowPos64) & this$static.m_PosStateMask;\n        if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsMatchDecoders, (this$static.state << 4) + posState)) {\n            decoder2 = $GetDecoder(this$static.m_LiteralDecoder, lowBits_0(this$static.nowPos64), this$static.prevByte);\n            if (this$static.state < 7) {\n                this$static.prevByte = $DecodeNormal(decoder2, this$static.m_RangeDecoder);\n            } else {\n                this$static.prevByte = $DecodeWithMatchByte(decoder2, this$static.m_RangeDecoder, $GetByte(this$static.m_OutWindow, this$static.rep0));\n            }\n            $PutByte(this$static.m_OutWindow, this$static.prevByte);\n            this$static.state = StateUpdateChar(this$static.state);\n            this$static.nowPos64 = add(this$static.nowPos64, P1_longLit);\n        } else {\n            if ($DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepDecoders, this$static.state)) {\n                len = 0;\n                if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG0Decoders, this$static.state)) {\n                    if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRep0LongDecoders, (this$static.state << 4) + posState)) {\n                        this$static.state = this$static.state < 7?9:11;\n                        len = 1;\n                    }\n                } else {\n                    if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG1Decoders, this$static.state)) {\n                        distance = this$static.rep1;\n                    } else {\n                        if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG2Decoders, this$static.state)) {\n                            distance = this$static.rep2;\n                        } else {\n                            distance = this$static.rep3;\n                            this$static.rep3 = this$static.rep2;\n                        }\n                        this$static.rep2 = this$static.rep1;\n                    }\n                    this$static.rep1 = this$static.rep0;\n                    this$static.rep0 = distance;\n                }\n                if (!len) {\n                    len = $Decode(this$static.m_RepLenDecoder, this$static.m_RangeDecoder, posState) + 2;\n                    this$static.state = this$static.state < 7?8:11;\n                }\n            } else {\n                this$static.rep3 = this$static.rep2;\n                this$static.rep2 = this$static.rep1;\n                this$static.rep1 = this$static.rep0;\n                len = 2 + $Decode(this$static.m_LenDecoder, this$static.m_RangeDecoder, posState);\n                this$static.state = this$static.state < 7?7:10;\n                posSlot = $Decode_0(this$static.m_PosSlotDecoder[GetLenToPosState(len)], this$static.m_RangeDecoder);\n                if (posSlot >= 4) {\n                    numDirectBits = (posSlot >> 1) - 1;\n                    this$static.rep0 = (2 | posSlot & 1) << numDirectBits;\n                    if (posSlot < 14) {\n                        this$static.rep0 += ReverseDecode(this$static.m_PosDecoders, this$static.rep0 - posSlot - 1, this$static.m_RangeDecoder, numDirectBits);\n                    } else {\n                        this$static.rep0 += $DecodeDirectBits(this$static.m_RangeDecoder, numDirectBits - 4) << 4;\n                        this$static.rep0 += $ReverseDecode(this$static.m_PosAlignDecoder, this$static.m_RangeDecoder);\n                        if (this$static.rep0 < 0) {\n                            if (this$static.rep0 == -1) {\n                                return 1;\n                            }\n                            return -1;\n                        }\n                    }\n                } else \n                    this$static.rep0 = posSlot;\n            }\n            if (compare(fromInt(this$static.rep0), this$static.nowPos64) >= 0 || this$static.rep0 >= this$static.m_DictionarySizeCheck) {\n                return -1;\n            }\n            $CopyBlock(this$static.m_OutWindow, this$static.rep0, len);\n            this$static.nowPos64 = add(this$static.nowPos64, fromInt(len));\n            this$static.prevByte = $GetByte(this$static.m_OutWindow, 0);\n        }\n        return 0;\n    }\n    \n    function $Decoder(this$static) {\n        this$static.m_OutWindow = {};\n        this$static.m_RangeDecoder = {};\n        this$static.m_IsMatchDecoders = initDim(192);\n        this$static.m_IsRepDecoders = initDim(12);\n        this$static.m_IsRepG0Decoders = initDim(12);\n        this$static.m_IsRepG1Decoders = initDim(12);\n        this$static.m_IsRepG2Decoders = initDim(12);\n        this$static.m_IsRep0LongDecoders = initDim(192);\n        this$static.m_PosSlotDecoder = initDim(4);\n        this$static.m_PosDecoders = initDim(114);\n        this$static.m_PosAlignDecoder = $BitTreeDecoder({}, 4);\n        this$static.m_LenDecoder = $Decoder$LenDecoder({});\n        this$static.m_RepLenDecoder = $Decoder$LenDecoder({});\n        this$static.m_LiteralDecoder = {};\n        for (var i = 0; i < 4; ++i) {\n            this$static.m_PosSlotDecoder[i] = $BitTreeDecoder({}, 6);\n        }\n        return this$static;\n    }\n    \n    function $Init_1(this$static) {\n        this$static.m_OutWindow._streamPos = 0;\n        this$static.m_OutWindow._pos = 0;\n        InitBitModels(this$static.m_IsMatchDecoders);\n        InitBitModels(this$static.m_IsRep0LongDecoders);\n        InitBitModels(this$static.m_IsRepDecoders);\n        InitBitModels(this$static.m_IsRepG0Decoders);\n        InitBitModels(this$static.m_IsRepG1Decoders);\n        InitBitModels(this$static.m_IsRepG2Decoders);\n        InitBitModels(this$static.m_PosDecoders);\n        $Init_0(this$static.m_LiteralDecoder);\n        for (var i = 0; i < 4; ++i) {\n            InitBitModels(this$static.m_PosSlotDecoder[i].Models);\n        }\n        $Init(this$static.m_LenDecoder);\n        $Init(this$static.m_RepLenDecoder);\n        InitBitModels(this$static.m_PosAlignDecoder.Models);\n        $Init_8(this$static.m_RangeDecoder);\n    }\n    \n    function $SetDecoderProperties(this$static, properties) {\n        var dictionarySize, i, lc, lp, pb, remainder, val;\n        if (properties.length < 5)\n            return 0;\n        val = properties[0] & 255;\n        lc = val % 9;\n        remainder = ~~(val / 9);\n        lp = remainder % 5;\n        pb = ~~(remainder / 5);\n        dictionarySize = 0;\n        for (i = 0; i < 4; ++i) {\n            dictionarySize += (properties[1 + i] & 255) << i * 8;\n        }\n        ///NOTE: If the input is bad, it might call for an insanely large dictionary size, which would crash the script.\n        if (dictionarySize > 99999999 || !$SetLcLpPb(this$static, lc, lp, pb)) {\n            return 0;\n        }\n        return $SetDictionarySize(this$static, dictionarySize);\n    }\n    \n    function $SetDictionarySize(this$static, dictionarySize) {\n        if (dictionarySize < 0) {\n            return 0;\n        }\n        if (this$static.m_DictionarySize != dictionarySize) {\n            this$static.m_DictionarySize = dictionarySize;\n            this$static.m_DictionarySizeCheck = Math.max(this$static.m_DictionarySize, 1);\n            $Create_5(this$static.m_OutWindow, Math.max(this$static.m_DictionarySizeCheck, 4096));\n        }\n        return 1;\n    }\n    \n    function $SetLcLpPb(this$static, lc, lp, pb) {\n        if (lc > 8 || lp > 4 || pb > 4) {\n            return 0;\n        }\n        $Create_0(this$static.m_LiteralDecoder, lp, lc);\n        var numPosStates = 1 << pb;\n        $Create(this$static.m_LenDecoder, numPosStates);\n        $Create(this$static.m_RepLenDecoder, numPosStates);\n        this$static.m_PosStateMask = numPosStates - 1;\n        return 1;\n    }\n    \n    function $Create(this$static, numPosStates) {\n        for (; this$static.m_NumPosStates < numPosStates; ++this$static.m_NumPosStates) {\n            this$static.m_LowCoder[this$static.m_NumPosStates] = $BitTreeDecoder({}, 3);\n            this$static.m_MidCoder[this$static.m_NumPosStates] = $BitTreeDecoder({}, 3);\n        }\n    }\n    \n    function $Decode(this$static, rangeDecoder, posState) {\n        if (!$DecodeBit(rangeDecoder, this$static.m_Choice, 0)) {\n            return $Decode_0(this$static.m_LowCoder[posState], rangeDecoder);\n        }\n        var symbol = 8;\n        if (!$DecodeBit(rangeDecoder, this$static.m_Choice, 1)) {\n            symbol += $Decode_0(this$static.m_MidCoder[posState], rangeDecoder);\n        } else {\n            symbol += 8 + $Decode_0(this$static.m_HighCoder, rangeDecoder);\n        }\n        return symbol;\n    }\n    \n    function $Decoder$LenDecoder(this$static) {\n        this$static.m_Choice = initDim(2);\n        this$static.m_LowCoder = initDim(16);\n        this$static.m_MidCoder = initDim(16);\n        this$static.m_HighCoder = $BitTreeDecoder({}, 8);\n        this$static.m_NumPosStates = 0;\n        return this$static;\n    }\n    \n    function $Init(this$static) {\n        InitBitModels(this$static.m_Choice);\n        for (var posState = 0; posState < this$static.m_NumPosStates; ++posState) {\n            InitBitModels(this$static.m_LowCoder[posState].Models);\n            InitBitModels(this$static.m_MidCoder[posState].Models);\n        }\n        InitBitModels(this$static.m_HighCoder.Models);\n    }\n    \n    \n    function $Create_0(this$static, numPosBits, numPrevBits) {\n        var i, numStates;\n        if (this$static.m_Coders != null && this$static.m_NumPrevBits == numPrevBits && this$static.m_NumPosBits == numPosBits)\n            return;\n        this$static.m_NumPosBits = numPosBits;\n        this$static.m_PosMask = (1 << numPosBits) - 1;\n        this$static.m_NumPrevBits = numPrevBits;\n        numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\n        this$static.m_Coders = initDim(numStates);\n        for (i = 0; i < numStates; ++i)\n            this$static.m_Coders[i] = $Decoder$LiteralDecoder$Decoder2({});\n    }\n    \n    function $GetDecoder(this$static, pos, prevByte) {\n        return this$static.m_Coders[((pos & this$static.m_PosMask) << this$static.m_NumPrevBits) + ((prevByte & 255) >>> 8 - this$static.m_NumPrevBits)];\n    }\n    \n    function $Init_0(this$static) {\n        var i, numStates;\n        numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\n        for (i = 0; i < numStates; ++i) {\n            InitBitModels(this$static.m_Coders[i].m_Decoders);\n        }\n    }\n    \n    \n    function $DecodeNormal(this$static, rangeDecoder) {\n        var symbol = 1;\n        do {\n            symbol = symbol << 1 | $DecodeBit(rangeDecoder, this$static.m_Decoders, symbol);\n        } while (symbol < 256);\n        return symbol << 24 >> 24;\n    }\n    \n    function $DecodeWithMatchByte(this$static, rangeDecoder, matchByte) {\n        var bit, matchBit, symbol = 1;\n        do {\n            matchBit = matchByte >> 7 & 1;\n            matchByte <<= 1;\n            bit = $DecodeBit(rangeDecoder, this$static.m_Decoders, (1 + matchBit << 8) + symbol);\n            symbol = symbol << 1 | bit;\n            if (matchBit != bit) {\n                while (symbol < 256) {\n                    symbol = symbol << 1 | $DecodeBit(rangeDecoder, this$static.m_Decoders, symbol);\n                }\n            break;\n            }\n        } while (symbol < 256);\n        return symbol << 24 >> 24;\n    }\n    \n    function $Decoder$LiteralDecoder$Decoder2(this$static) {\n        this$static.m_Decoders = initDim(768);\n        return this$static;\n    }\n    \n    /** de */\n    /** cs */\n    var g_FastPos = (function () {\n        var j, k, slotFast, c = 2, g_FastPos = [0, 1];\n        for (slotFast = 2; slotFast < 22; ++slotFast) {\n            k = 1 << (slotFast >> 1) - 1;\n            for (j = 0; j < k; ++j , ++c)\n                g_FastPos[c] = slotFast << 24 >> 24;\n        }\n        return g_FastPos;\n    }());\n    \n    function $Backward(this$static, cur) {\n        var backCur, backMem, posMem, posPrev;\n        this$static._optimumEndIndex = cur;\n        posMem = this$static._optimum[cur].PosPrev;\n        backMem = this$static._optimum[cur].BackPrev;\n        do {\n            if (this$static._optimum[cur].Prev1IsChar) {\n                $MakeAsChar(this$static._optimum[posMem]);\n                this$static._optimum[posMem].PosPrev = posMem - 1;\n                if (this$static._optimum[cur].Prev2) {\n                    this$static._optimum[posMem - 1].Prev1IsChar = 0;\n                    this$static._optimum[posMem - 1].PosPrev = this$static._optimum[cur].PosPrev2;\n                    this$static._optimum[posMem - 1].BackPrev = this$static._optimum[cur].BackPrev2;\n                }\n            }\n            posPrev = posMem;\n            backCur = backMem;\n            backMem = this$static._optimum[posPrev].BackPrev;\n            posMem = this$static._optimum[posPrev].PosPrev;\n            this$static._optimum[posPrev].BackPrev = backCur;\n            this$static._optimum[posPrev].PosPrev = cur;\n            cur = posPrev;\n        } while (cur > 0);\n        this$static.backRes = this$static._optimum[0].BackPrev;\n        this$static._optimumCurrentIndex = this$static._optimum[0].PosPrev;\n        return this$static._optimumCurrentIndex;\n    }\n    \n    function $BaseInit(this$static) {\n        this$static._state = 0;\n        this$static._previousByte = 0;\n        for (var i = 0; i < 4; ++i) {\n            this$static._repDistances[i] = 0;\n        }\n    }\n    \n    function $CodeOneBlock(this$static, inSize, outSize, finished) {\n        var baseVal, complexState, curByte, distance, footerBits, i, len, lenToPosState, matchByte, pos, posReduced, posSlot, posState, progressPosValuePrev, subCoder;\n        inSize[0] = P0_longLit;\n        outSize[0] = P0_longLit;\n        finished[0] = 1;\n        if (this$static._inStream) {\n            this$static._matchFinder._stream = this$static._inStream;\n            $Init_5(this$static._matchFinder);\n            this$static._needReleaseMFStream = 1;\n            this$static._inStream = null;\n        }\n        if (this$static._finished) {\n            return;\n        }\n        this$static._finished = 1;\n        progressPosValuePrev = this$static.nowPos64;\n        if (eq(this$static.nowPos64, P0_longLit)) {\n            if (!$GetNumAvailableBytes(this$static._matchFinder)) {\n                $Flush(this$static, lowBits_0(this$static.nowPos64));\n                return;\n            }\n            $ReadMatchDistances(this$static);\n            posState = lowBits_0(this$static.nowPos64) & this$static._posStateMask;\n            $Encode_3(this$static._rangeEncoder, this$static._isMatch, (this$static._state << 4) + posState, 0);\n            this$static._state = StateUpdateChar(this$static._state);\n            curByte = $GetIndexByte(this$static._matchFinder, -this$static._additionalOffset);\n            $Encode_1($GetSubCoder(this$static._literalEncoder, lowBits_0(this$static.nowPos64), this$static._previousByte), this$static._rangeEncoder, curByte);\n            this$static._previousByte = curByte;\n            --this$static._additionalOffset;\n            this$static.nowPos64 = add(this$static.nowPos64, P1_longLit);\n        }\n        if (!$GetNumAvailableBytes(this$static._matchFinder)) {\n            $Flush(this$static, lowBits_0(this$static.nowPos64));\n            return;\n        }\n        while (1) {\n            len = $GetOptimum(this$static, lowBits_0(this$static.nowPos64));\n            pos = this$static.backRes;\n            posState = lowBits_0(this$static.nowPos64) & this$static._posStateMask;\n            complexState = (this$static._state << 4) + posState;\n            if (len == 1 && pos == -1) {\n                $Encode_3(this$static._rangeEncoder, this$static._isMatch, complexState, 0);\n                curByte = $GetIndexByte(this$static._matchFinder, -this$static._additionalOffset);\n                subCoder = $GetSubCoder(this$static._literalEncoder, lowBits_0(this$static.nowPos64), this$static._previousByte);\n                if (this$static._state < 7) {\n                    $Encode_1(subCoder, this$static._rangeEncoder, curByte);\n                } else {\n                    matchByte = $GetIndexByte(this$static._matchFinder, -this$static._repDistances[0] - 1 - this$static._additionalOffset);\n                    $EncodeMatched(subCoder, this$static._rangeEncoder, matchByte, curByte);\n                }\n                this$static._previousByte = curByte;\n                this$static._state = StateUpdateChar(this$static._state);\n            } else {\n                $Encode_3(this$static._rangeEncoder, this$static._isMatch, complexState, 1);\n                if (pos < 4) {\n                    $Encode_3(this$static._rangeEncoder, this$static._isRep, this$static._state, 1);\n                    if (!pos) {\n                        $Encode_3(this$static._rangeEncoder, this$static._isRepG0, this$static._state, 0);\n                        if (len == 1) {\n                            $Encode_3(this$static._rangeEncoder, this$static._isRep0Long, complexState, 0);\n                        } else {\n                            $Encode_3(this$static._rangeEncoder, this$static._isRep0Long, complexState, 1);\n                        }\n                    } else {\n                        $Encode_3(this$static._rangeEncoder, this$static._isRepG0, this$static._state, 1);\n                        if (pos == 1) {\n                            $Encode_3(this$static._rangeEncoder, this$static._isRepG1, this$static._state, 0);\n                        } else {\n                            $Encode_3(this$static._rangeEncoder, this$static._isRepG1, this$static._state, 1);\n                            $Encode_3(this$static._rangeEncoder, this$static._isRepG2, this$static._state, pos - 2);\n                        }\n                    }\n                    if (len == 1) {\n                        this$static._state = this$static._state < 7?9:11;\n                    } else {\n                        $Encode_0(this$static._repMatchLenEncoder, this$static._rangeEncoder, len - 2, posState);\n                        this$static._state = this$static._state < 7?8:11;\n                    }\n                    distance = this$static._repDistances[pos];\n                    if (pos != 0) {\n                        for (i = pos; i >= 1; --i) {\n                            this$static._repDistances[i] = this$static._repDistances[i - 1];\n                        }\n                        this$static._repDistances[0] = distance;\n                    }\n                } else {\n                    $Encode_3(this$static._rangeEncoder, this$static._isRep, this$static._state, 0);\n                    this$static._state = this$static._state < 7?7:10;\n                    $Encode_0(this$static._lenEncoder, this$static._rangeEncoder, len - 2, posState);\n                    pos -= 4;\n                    posSlot = GetPosSlot(pos);\n                    lenToPosState = GetLenToPosState(len);\n                    $Encode_2(this$static._posSlotEncoder[lenToPosState], this$static._rangeEncoder, posSlot);\n                    if (posSlot >= 4) {\n                        footerBits = (posSlot >> 1) - 1;\n                        baseVal = (2 | posSlot & 1) << footerBits;\n                        posReduced = pos - baseVal;\n                        if (posSlot < 14) {\n                            ReverseEncode(this$static._posEncoders, baseVal - posSlot - 1, this$static._rangeEncoder, footerBits, posReduced);\n                        } else {\n                            $EncodeDirectBits(this$static._rangeEncoder, posReduced >> 4, footerBits - 4);\n                            $ReverseEncode(this$static._posAlignEncoder, this$static._rangeEncoder, posReduced & 15);\n                            ++this$static._alignPriceCount;\n                        }\n                    }\n                    distance = pos;\n                    for (i = 3; i >= 1; --i) {\n                        this$static._repDistances[i] = this$static._repDistances[i - 1];\n                    }\n                    this$static._repDistances[0] = distance;\n                    ++this$static._matchPriceCount;\n                }\n                this$static._previousByte = $GetIndexByte(this$static._matchFinder, len - 1 - this$static._additionalOffset);\n            }\n            this$static._additionalOffset -= len;\n            this$static.nowPos64 = add(this$static.nowPos64, fromInt(len));\n            if (!this$static._additionalOffset) {\n                if (this$static._matchPriceCount >= 128) {\n                    $FillDistancesPrices(this$static);\n                }\n                if (this$static._alignPriceCount >= 16) {\n                    $FillAlignPrices(this$static);\n                }\n                inSize[0] = this$static.nowPos64;\n                outSize[0] = $GetProcessedSizeAdd(this$static._rangeEncoder);\n                if (!$GetNumAvailableBytes(this$static._matchFinder)) {\n                    $Flush(this$static, lowBits_0(this$static.nowPos64));\n                    return;\n                }\n                if (compare(sub(this$static.nowPos64, progressPosValuePrev), [4096, 0]) >= 0) {\n                    this$static._finished = 0;\n                    finished[0] = 0;\n                    return;\n                }\n            }\n        }\n    }\n    \n    function $Create_2(this$static) {\n        var bt, numHashBytes;\n        if (!this$static._matchFinder) {\n            bt = {};\n            numHashBytes = 4;\n            if (!this$static._matchFinderType) {\n                numHashBytes = 2;\n            }\n            $SetType(bt, numHashBytes);\n            this$static._matchFinder = bt;\n        }\n        $Create_1(this$static._literalEncoder, this$static._numLiteralPosStateBits, this$static._numLiteralContextBits);\n        if (this$static._dictionarySize == this$static._dictionarySizePrev && this$static._numFastBytesPrev == this$static._numFastBytes) {\n            return;\n        }\n        $Create_3(this$static._matchFinder, this$static._dictionarySize, 4096, this$static._numFastBytes, 274);\n        this$static._dictionarySizePrev = this$static._dictionarySize;\n        this$static._numFastBytesPrev = this$static._numFastBytes;\n    }\n    \n    function $Encoder(this$static) {\n        var i;\n        this$static._repDistances = initDim(4);\n        this$static._optimum = [];\n        this$static._rangeEncoder = {};\n        this$static._isMatch = initDim(192);\n        this$static._isRep = initDim(12);\n        this$static._isRepG0 = initDim(12);\n        this$static._isRepG1 = initDim(12);\n        this$static._isRepG2 = initDim(12);\n        this$static._isRep0Long = initDim(192);\n        this$static._posSlotEncoder = [];\n        this$static._posEncoders = initDim(114);\n        this$static._posAlignEncoder = $BitTreeEncoder({}, 4);\n        this$static._lenEncoder = $Encoder$LenPriceTableEncoder({});\n        this$static._repMatchLenEncoder = $Encoder$LenPriceTableEncoder({});\n        this$static._literalEncoder = {};\n        this$static._matchDistances = [];\n        this$static._posSlotPrices = [];\n        this$static._distancesPrices = [];\n        this$static._alignPrices = initDim(16);\n        this$static.reps = initDim(4);\n        this$static.repLens = initDim(4);\n        this$static.processedInSize = [P0_longLit];\n        this$static.processedOutSize = [P0_longLit];\n        this$static.finished = [0];\n        this$static.properties = initDim(5);\n        this$static.tempPrices = initDim(128);\n        this$static._longestMatchLength = 0;\n        this$static._matchFinderType = 1;\n        this$static._numDistancePairs = 0;\n        this$static._numFastBytesPrev = -1;\n        this$static.backRes = 0;\n        for (i = 0; i < 4096; ++i) {\n            this$static._optimum[i] = {};\n        }\n        for (i = 0; i < 4; ++i) {\n            this$static._posSlotEncoder[i] = $BitTreeEncoder({}, 6);\n        }\n        return this$static;\n    }\n    \n    function $FillAlignPrices(this$static) {\n        for (var i = 0; i < 16; ++i) {\n            this$static._alignPrices[i] = $ReverseGetPrice(this$static._posAlignEncoder, i);\n        }\n        this$static._alignPriceCount = 0;\n    }\n    \n    function $FillDistancesPrices(this$static) {\n        var baseVal, encoder, footerBits, i, lenToPosState, posSlot, st, st2;\n        for (i = 4; i < 128; ++i) {\n            posSlot = GetPosSlot(i);\n            footerBits = (posSlot >> 1) - 1;\n            baseVal = (2 | posSlot & 1) << footerBits;\n            this$static.tempPrices[i] = ReverseGetPrice(this$static._posEncoders, baseVal - posSlot - 1, footerBits, i - baseVal);\n        }\n        for (lenToPosState = 0; lenToPosState < 4; ++lenToPosState) {\n            encoder = this$static._posSlotEncoder[lenToPosState];\n            st = lenToPosState << 6;\n            for (posSlot = 0; posSlot < this$static._distTableSize; ++posSlot) {\n                this$static._posSlotPrices[st + posSlot] = $GetPrice_1(encoder, posSlot);\n            }\n            for (posSlot = 14; posSlot < this$static._distTableSize; ++posSlot) {\n                this$static._posSlotPrices[st + posSlot] += (posSlot >> 1) - 1 - 4 << 6;\n            }\n            st2 = lenToPosState * 128;\n            for (i = 0; i < 4; ++i) {\n                this$static._distancesPrices[st2 + i] = this$static._posSlotPrices[st + i];\n            }\n            for (; i < 128; ++i) {\n                this$static._distancesPrices[st2 + i] = this$static._posSlotPrices[st + GetPosSlot(i)] + this$static.tempPrices[i];\n            }\n        }\n        this$static._matchPriceCount = 0;\n    }\n    \n    function $Flush(this$static, nowPos) {\n        $ReleaseMFStream(this$static);\n        $WriteEndMarker(this$static, nowPos & this$static._posStateMask);\n        for (var i = 0; i < 5; ++i) {\n            $ShiftLow(this$static._rangeEncoder);\n        }\n    }\n    \n    function $GetOptimum(this$static, position) {\n        var cur, curAnd1Price, curAndLenCharPrice, curAndLenPrice, curBack, curPrice, currentByte, distance, i, len, lenEnd, lenMain, lenRes, lenTest, lenTest2, lenTestTemp, matchByte, matchPrice, newLen, nextIsChar, nextMatchPrice, nextOptimum, nextRepMatchPrice, normalMatchPrice, numAvailableBytes, numAvailableBytesFull, numDistancePairs, offs, offset, opt, optimum, pos, posPrev, posState, posStateNext, price_4, repIndex, repLen, repMatchPrice, repMaxIndex, shortRepPrice, startLen, state, state2, t, price, price_0, price_1, price_2, price_3;\n        if (this$static._optimumEndIndex != this$static._optimumCurrentIndex) {\n            lenRes = this$static._optimum[this$static._optimumCurrentIndex].PosPrev - this$static._optimumCurrentIndex;\n            this$static.backRes = this$static._optimum[this$static._optimumCurrentIndex].BackPrev;\n            this$static._optimumCurrentIndex = this$static._optimum[this$static._optimumCurrentIndex].PosPrev;\n            return lenRes;\n        }\n        this$static._optimumCurrentIndex = this$static._optimumEndIndex = 0;\n        if (this$static._longestMatchWasFound) {\n            lenMain = this$static._longestMatchLength;\n            this$static._longestMatchWasFound = 0;\n        } else {\n            lenMain = $ReadMatchDistances(this$static);\n        }\n        numDistancePairs = this$static._numDistancePairs;\n        numAvailableBytes = $GetNumAvailableBytes(this$static._matchFinder) + 1;\n        if (numAvailableBytes < 2) {\n            this$static.backRes = -1;\n            return 1;\n        }\n        if (numAvailableBytes > 273) {\n            numAvailableBytes = 273;\n        }\n        repMaxIndex = 0;\n        for (i = 0; i < 4; ++i) {\n            this$static.reps[i] = this$static._repDistances[i];\n            this$static.repLens[i] = $GetMatchLen(this$static._matchFinder, -1, this$static.reps[i], 273);\n            if (this$static.repLens[i] > this$static.repLens[repMaxIndex]) {\n                repMaxIndex = i;\n            }\n        }\n        if (this$static.repLens[repMaxIndex] >= this$static._numFastBytes) {\n            this$static.backRes = repMaxIndex;\n            lenRes = this$static.repLens[repMaxIndex];\n            $MovePos(this$static, lenRes - 1);\n            return lenRes;\n        }\n        if (lenMain >= this$static._numFastBytes) {\n            this$static.backRes = this$static._matchDistances[numDistancePairs - 1] + 4;\n            $MovePos(this$static, lenMain - 1);\n            return lenMain;\n        }\n        currentByte = $GetIndexByte(this$static._matchFinder, -1);\n        matchByte = $GetIndexByte(this$static._matchFinder, -this$static._repDistances[0] - 1 - 1);\n        if (lenMain < 2 && currentByte != matchByte && this$static.repLens[repMaxIndex] < 2) {\n            this$static.backRes = -1;\n            return 1;\n        }\n        this$static._optimum[0].State = this$static._state;\n        posState = position & this$static._posStateMask;\n        this$static._optimum[1].Price = ProbPrices[this$static._isMatch[(this$static._state << 4) + posState] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position, this$static._previousByte), this$static._state >= 7, matchByte, currentByte);\n        $MakeAsChar(this$static._optimum[1]);\n        matchPrice = ProbPrices[2048 - this$static._isMatch[(this$static._state << 4) + posState] >>> 2];\n        repMatchPrice = matchPrice + ProbPrices[2048 - this$static._isRep[this$static._state] >>> 2];\n        if (matchByte == currentByte) {\n            shortRepPrice = repMatchPrice + $GetRepLen1Price(this$static, this$static._state, posState);\n            if (shortRepPrice < this$static._optimum[1].Price) {\n                this$static._optimum[1].Price = shortRepPrice;\n                $MakeAsShortRep(this$static._optimum[1]);\n            }\n        }\n        lenEnd = lenMain >= this$static.repLens[repMaxIndex]?lenMain:this$static.repLens[repMaxIndex];\n        if (lenEnd < 2) {\n            this$static.backRes = this$static._optimum[1].BackPrev;\n            return 1;\n        }\n        this$static._optimum[1].PosPrev = 0;\n        this$static._optimum[0].Backs0 = this$static.reps[0];\n        this$static._optimum[0].Backs1 = this$static.reps[1];\n        this$static._optimum[0].Backs2 = this$static.reps[2];\n        this$static._optimum[0].Backs3 = this$static.reps[3];\n        len = lenEnd;\n        do {\n            this$static._optimum[len--].Price = 268435455;\n        } while (len >= 2);\n        for (i = 0; i < 4; ++i) {\n            repLen = this$static.repLens[i];\n            if (repLen < 2) {\n                continue;\n            }\n            price_4 = repMatchPrice + $GetPureRepPrice(this$static, i, this$static._state, posState);\n            do {\n                curAndLenPrice = price_4 + $GetPrice(this$static._repMatchLenEncoder, repLen - 2, posState);\n                optimum = this$static._optimum[repLen];\n                if (curAndLenPrice < optimum.Price) {\n                    optimum.Price = curAndLenPrice;\n                    optimum.PosPrev = 0;\n                    optimum.BackPrev = i;\n                    optimum.Prev1IsChar = 0;\n                }\n            } while (--repLen >= 2);\n        }\n        normalMatchPrice = matchPrice + ProbPrices[this$static._isRep[this$static._state] >>> 2];\n        len = this$static.repLens[0] >= 2?this$static.repLens[0] + 1:2;\n        if (len <= lenMain) {\n            offs = 0;\n            while (len > this$static._matchDistances[offs]) {\n                offs += 2;\n            }\n            for (;; ++len) {\n                distance = this$static._matchDistances[offs + 1];\n                curAndLenPrice = normalMatchPrice + $GetPosLenPrice(this$static, distance, len, posState);\n                optimum = this$static._optimum[len];\n                if (curAndLenPrice < optimum.Price) {\n                    optimum.Price = curAndLenPrice;\n                    optimum.PosPrev = 0;\n                    optimum.BackPrev = distance + 4;\n                    optimum.Prev1IsChar = 0;\n                }\n                if (len == this$static._matchDistances[offs]) {\n                    offs += 2;\n                    if (offs == numDistancePairs) {\n                        break;\n                    }\n                }\n            }\n        }\n        cur = 0;\n        while (1) {\n            ++cur;\n            if (cur == lenEnd) {\n                return $Backward(this$static, cur);\n            }\n            newLen = $ReadMatchDistances(this$static);\n            numDistancePairs = this$static._numDistancePairs;\n            if (newLen >= this$static._numFastBytes) {\n                this$static._longestMatchLength = newLen;\n                this$static._longestMatchWasFound = 1;\n                return $Backward(this$static, cur);\n            }\n            ++position;\n            posPrev = this$static._optimum[cur].PosPrev;\n            if (this$static._optimum[cur].Prev1IsChar) {\n                --posPrev;\n                if (this$static._optimum[cur].Prev2) {\n                    state = this$static._optimum[this$static._optimum[cur].PosPrev2].State;\n                    if (this$static._optimum[cur].BackPrev2 < 4) {\n                        state = (state < 7) ? 8 : 11;\n                    } else {\n                        state = (state < 7) ? 7 : 10;\n                    }\n                } else {\n                    state = this$static._optimum[posPrev].State;\n                }\n                state = StateUpdateChar(state);\n            } else {\n                state = this$static._optimum[posPrev].State;\n            }\n            if (posPrev == cur - 1) {\n                if (!this$static._optimum[cur].BackPrev) {\n                    state = state < 7?9:11;\n                } else {\n                    state = StateUpdateChar(state);\n                }\n            } else {\n                if (this$static._optimum[cur].Prev1IsChar && this$static._optimum[cur].Prev2) {\n                    posPrev = this$static._optimum[cur].PosPrev2;\n                    pos = this$static._optimum[cur].BackPrev2;\n                    state = state < 7?8:11;\n                } else {\n                    pos = this$static._optimum[cur].BackPrev;\n                    if (pos < 4) {\n                        state = state < 7?8:11;\n                    } else {\n                        state = state < 7?7:10;\n                    }\n                }\n                opt = this$static._optimum[posPrev];\n                if (pos < 4) {\n                    if (!pos) {\n                        this$static.reps[0] = opt.Backs0;\n                        this$static.reps[1] = opt.Backs1;\n                        this$static.reps[2] = opt.Backs2;\n                        this$static.reps[3] = opt.Backs3;\n                    } else if (pos == 1) {\n                        this$static.reps[0] = opt.Backs1;\n                        this$static.reps[1] = opt.Backs0;\n                        this$static.reps[2] = opt.Backs2;\n                        this$static.reps[3] = opt.Backs3;\n                    } else if (pos == 2) {\n                        this$static.reps[0] = opt.Backs2;\n                        this$static.reps[1] = opt.Backs0;\n                        this$static.reps[2] = opt.Backs1;\n                        this$static.reps[3] = opt.Backs3;\n                    } else {\n                        this$static.reps[0] = opt.Backs3;\n                        this$static.reps[1] = opt.Backs0;\n                        this$static.reps[2] = opt.Backs1;\n                        this$static.reps[3] = opt.Backs2;\n                    }\n                } else {\n                    this$static.reps[0] = pos - 4;\n                    this$static.reps[1] = opt.Backs0;\n                    this$static.reps[2] = opt.Backs1;\n                    this$static.reps[3] = opt.Backs2;\n                }\n            }\n            this$static._optimum[cur].State = state;\n            this$static._optimum[cur].Backs0 = this$static.reps[0];\n            this$static._optimum[cur].Backs1 = this$static.reps[1];\n            this$static._optimum[cur].Backs2 = this$static.reps[2];\n            this$static._optimum[cur].Backs3 = this$static.reps[3];\n            curPrice = this$static._optimum[cur].Price;\n            currentByte = $GetIndexByte(this$static._matchFinder, -1);\n            matchByte = $GetIndexByte(this$static._matchFinder, -this$static.reps[0] - 1 - 1);\n            posState = position & this$static._posStateMask;\n            curAnd1Price = curPrice + ProbPrices[this$static._isMatch[(state << 4) + posState] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position, $GetIndexByte(this$static._matchFinder, -2)), state >= 7, matchByte, currentByte);\n            nextOptimum = this$static._optimum[cur + 1];\n            nextIsChar = 0;\n            if (curAnd1Price < nextOptimum.Price) {\n                nextOptimum.Price = curAnd1Price;\n                nextOptimum.PosPrev = cur;\n                nextOptimum.BackPrev = -1;\n                nextOptimum.Prev1IsChar = 0;\n                nextIsChar = 1;\n            }\n            matchPrice = curPrice + ProbPrices[2048 - this$static._isMatch[(state << 4) + posState] >>> 2];\n            repMatchPrice = matchPrice + ProbPrices[2048 - this$static._isRep[state] >>> 2];\n            if (matchByte == currentByte && !(nextOptimum.PosPrev < cur && !nextOptimum.BackPrev)) {\n                shortRepPrice = repMatchPrice + (ProbPrices[this$static._isRepG0[state] >>> 2] + ProbPrices[this$static._isRep0Long[(state << 4) + posState] >>> 2]);\n                if (shortRepPrice <= nextOptimum.Price) {\n                    nextOptimum.Price = shortRepPrice;\n                    nextOptimum.PosPrev = cur;\n                    nextOptimum.BackPrev = 0;\n                    nextOptimum.Prev1IsChar = 0;\n                    nextIsChar = 1;\n                }\n            }\n            numAvailableBytesFull = $GetNumAvailableBytes(this$static._matchFinder) + 1;\n            numAvailableBytesFull = 4095 - cur < numAvailableBytesFull?4095 - cur:numAvailableBytesFull;\n            numAvailableBytes = numAvailableBytesFull;\n            if (numAvailableBytes < 2) {\n                continue;\n            }\n            if (numAvailableBytes > this$static._numFastBytes) {\n                numAvailableBytes = this$static._numFastBytes;\n            }\n            if (!nextIsChar && matchByte != currentByte) {\n                t = Math.min(numAvailableBytesFull - 1, this$static._numFastBytes);\n                lenTest2 = $GetMatchLen(this$static._matchFinder, 0, this$static.reps[0], t);\n                if (lenTest2 >= 2) {\n                    state2 = StateUpdateChar(state);\n                    posStateNext = position + 1 & this$static._posStateMask;\n                    nextRepMatchPrice = curAnd1Price + ProbPrices[2048 - this$static._isMatch[(state2 << 4) + posStateNext] >>> 2] + ProbPrices[2048 - this$static._isRep[state2] >>> 2];\n                    offset = cur + 1 + lenTest2;\n                    while (lenEnd < offset) {\n                        this$static._optimum[++lenEnd].Price = 268435455;\n                    }\n                    curAndLenPrice = nextRepMatchPrice + (price = $GetPrice(this$static._repMatchLenEncoder, lenTest2 - 2, posStateNext) , price + $GetPureRepPrice(this$static, 0, state2, posStateNext));\n                    optimum = this$static._optimum[offset];\n                    if (curAndLenPrice < optimum.Price) {\n                        optimum.Price = curAndLenPrice;\n                        optimum.PosPrev = cur + 1;\n                        optimum.BackPrev = 0;\n                        optimum.Prev1IsChar = 1;\n                        optimum.Prev2 = 0;\n                    }\n                }\n            }\n            startLen = 2;\n            for (repIndex = 0; repIndex < 4; ++repIndex) {\n                lenTest = $GetMatchLen(this$static._matchFinder, -1, this$static.reps[repIndex], numAvailableBytes);\n                if (lenTest < 2) {\n                    continue;\n                }\n                lenTestTemp = lenTest;\n                do {\n                    while (lenEnd < cur + lenTest) {\n                        this$static._optimum[++lenEnd].Price = 268435455;\n                    }\n                    curAndLenPrice = repMatchPrice + (price_0 = $GetPrice(this$static._repMatchLenEncoder, lenTest - 2, posState) , price_0 + $GetPureRepPrice(this$static, repIndex, state, posState));\n                    optimum = this$static._optimum[cur + lenTest];\n                    if (curAndLenPrice < optimum.Price) {\n                        optimum.Price = curAndLenPrice;\n                        optimum.PosPrev = cur;\n                        optimum.BackPrev = repIndex;\n                        optimum.Prev1IsChar = 0;\n                    }\n                } while (--lenTest >= 2);\n                lenTest = lenTestTemp;\n                if (!repIndex) {\n                    startLen = lenTest + 1;\n                }\n                if (lenTest < numAvailableBytesFull) {\n                    t = Math.min(numAvailableBytesFull - 1 - lenTest, this$static._numFastBytes);\n                    lenTest2 = $GetMatchLen(this$static._matchFinder, lenTest, this$static.reps[repIndex], t);\n                    if (lenTest2 >= 2) {\n                        state2 = state < 7?8:11;\n                        posStateNext = position + lenTest & this$static._posStateMask;\n                        curAndLenCharPrice = repMatchPrice + (price_1 = $GetPrice(this$static._repMatchLenEncoder, lenTest - 2, posState) , price_1 + $GetPureRepPrice(this$static, repIndex, state, posState)) + ProbPrices[this$static._isMatch[(state2 << 4) + posStateNext] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position + lenTest, $GetIndexByte(this$static._matchFinder, lenTest - 1 - 1)), 1, $GetIndexByte(this$static._matchFinder, lenTest - 1 - (this$static.reps[repIndex] + 1)), $GetIndexByte(this$static._matchFinder, lenTest - 1));\n                        state2 = StateUpdateChar(state2);\n                        posStateNext = position + lenTest + 1 & this$static._posStateMask;\n                        nextMatchPrice = curAndLenCharPrice + ProbPrices[2048 - this$static._isMatch[(state2 << 4) + posStateNext] >>> 2];\n                        nextRepMatchPrice = nextMatchPrice + ProbPrices[2048 - this$static._isRep[state2] >>> 2];\n                        offset = lenTest + 1 + lenTest2;\n                        while (lenEnd < cur + offset) {\n                            this$static._optimum[++lenEnd].Price = 268435455;\n                        }\n                        curAndLenPrice = nextRepMatchPrice + (price_2 = $GetPrice(this$static._repMatchLenEncoder, lenTest2 - 2, posStateNext) , price_2 + $GetPureRepPrice(this$static, 0, state2, posStateNext));\n                        optimum = this$static._optimum[cur + offset];\n                        if (curAndLenPrice < optimum.Price) {\n                            optimum.Price = curAndLenPrice;\n                            optimum.PosPrev = cur + lenTest + 1;\n                            optimum.BackPrev = 0;\n                            optimum.Prev1IsChar = 1;\n                            optimum.Prev2 = 1;\n                            optimum.PosPrev2 = cur;\n                            optimum.BackPrev2 = repIndex;\n                        }\n                    }\n                }\n            }\n            if (newLen > numAvailableBytes) {\n                newLen = numAvailableBytes;\n                for (numDistancePairs = 0; newLen > this$static._matchDistances[numDistancePairs]; numDistancePairs += 2) {}\n                this$static._matchDistances[numDistancePairs] = newLen;\n                numDistancePairs += 2;\n            }\n            if (newLen >= startLen) {\n            normalMatchPrice = matchPrice + ProbPrices[this$static._isRep[state] >>> 2];\n            while (lenEnd < cur + newLen) {\n                this$static._optimum[++lenEnd].Price = 268435455;\n            }\n            offs = 0;\n            while (startLen > this$static._matchDistances[offs]) {\n                offs += 2;\n            }\n            for (lenTest = startLen;; ++lenTest) {\n                curBack = this$static._matchDistances[offs + 1];\n                curAndLenPrice = normalMatchPrice + $GetPosLenPrice(this$static, curBack, lenTest, posState);\n                optimum = this$static._optimum[cur + lenTest];\n                if (curAndLenPrice < optimum.Price) {\n                    optimum.Price = curAndLenPrice;\n                    optimum.PosPrev = cur;\n                    optimum.BackPrev = curBack + 4;\n                    optimum.Prev1IsChar = 0;\n                }\n                if (lenTest == this$static._matchDistances[offs]) {\n                    if (lenTest < numAvailableBytesFull) {\n                        t = Math.min(numAvailableBytesFull - 1 - lenTest, this$static._numFastBytes);\n                        lenTest2 = $GetMatchLen(this$static._matchFinder, lenTest, curBack, t);\n                        if (lenTest2 >= 2) {\n                            state2 = state < 7?7:10;\n                            posStateNext = position + lenTest & this$static._posStateMask;\n                            curAndLenCharPrice = curAndLenPrice + ProbPrices[this$static._isMatch[(state2 << 4) + posStateNext] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position + lenTest, $GetIndexByte(this$static._matchFinder, lenTest - 1 - 1)), 1, $GetIndexByte(this$static._matchFinder, lenTest - (curBack + 1) - 1), $GetIndexByte(this$static._matchFinder, lenTest - 1));\n                            state2 = StateUpdateChar(state2);\n                            posStateNext = position + lenTest + 1 & this$static._posStateMask;\n                            nextMatchPrice = curAndLenCharPrice + ProbPrices[2048 - this$static._isMatch[(state2 << 4) + posStateNext] >>> 2];\n                            nextRepMatchPrice = nextMatchPrice + ProbPrices[2048 - this$static._isRep[state2] >>> 2];\n                            offset = lenTest + 1 + lenTest2;\n                            while (lenEnd < cur + offset) {\n                                this$static._optimum[++lenEnd].Price = 268435455;\n                            }\n                            curAndLenPrice = nextRepMatchPrice + (price_3 = $GetPrice(this$static._repMatchLenEncoder, lenTest2 - 2, posStateNext) , price_3 + $GetPureRepPrice(this$static, 0, state2, posStateNext));\n                            optimum = this$static._optimum[cur + offset];\n                            if (curAndLenPrice < optimum.Price) {\n                                optimum.Price = curAndLenPrice;\n                                optimum.PosPrev = cur + lenTest + 1;\n                                optimum.BackPrev = 0;\n                                optimum.Prev1IsChar = 1;\n                                optimum.Prev2 = 1;\n                                optimum.PosPrev2 = cur;\n                                optimum.BackPrev2 = curBack + 4;\n                            }\n                        }\n                    }\n                    offs += 2;\n                    if (offs == numDistancePairs)\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    \n    function $GetPosLenPrice(this$static, pos, len, posState) {\n        var price, lenToPosState = GetLenToPosState(len);\n        if (pos < 128) {\n            price = this$static._distancesPrices[lenToPosState * 128 + pos];\n        } else {\n            price = this$static._posSlotPrices[(lenToPosState << 6) + GetPosSlot2(pos)] + this$static._alignPrices[pos & 15];\n        }\n        return price + $GetPrice(this$static._lenEncoder, len - 2, posState);\n    }\n    \n    function $GetPureRepPrice(this$static, repIndex, state, posState) {\n        var price;\n        if (!repIndex) {\n            price = ProbPrices[this$static._isRepG0[state] >>> 2];\n            price += ProbPrices[2048 - this$static._isRep0Long[(state << 4) + posState] >>> 2];\n        } else {\n            price = ProbPrices[2048 - this$static._isRepG0[state] >>> 2];\n            if (repIndex == 1) {\n                price += ProbPrices[this$static._isRepG1[state] >>> 2];\n            } else {\n                price += ProbPrices[2048 - this$static._isRepG1[state] >>> 2];\n                price += GetPrice(this$static._isRepG2[state], repIndex - 2);\n            }\n        }\n        return price;\n    }\n    \n    function $GetRepLen1Price(this$static, state, posState) {\n        return ProbPrices[this$static._isRepG0[state] >>> 2] + ProbPrices[this$static._isRep0Long[(state << 4) + posState] >>> 2];\n    }\n    \n    function $Init_4(this$static) {\n        $BaseInit(this$static);\n        $Init_9(this$static._rangeEncoder);\n        InitBitModels(this$static._isMatch);\n        InitBitModels(this$static._isRep0Long);\n        InitBitModels(this$static._isRep);\n        InitBitModels(this$static._isRepG0);\n        InitBitModels(this$static._isRepG1);\n        InitBitModels(this$static._isRepG2);\n        InitBitModels(this$static._posEncoders);\n        $Init_3(this$static._literalEncoder);\n        for (var i = 0; i < 4; ++i) {\n            InitBitModels(this$static._posSlotEncoder[i].Models);\n        }\n        $Init_2(this$static._lenEncoder, 1 << this$static._posStateBits);\n        $Init_2(this$static._repMatchLenEncoder, 1 << this$static._posStateBits);\n        InitBitModels(this$static._posAlignEncoder.Models);\n        this$static._longestMatchWasFound = 0;\n        this$static._optimumEndIndex = 0;\n        this$static._optimumCurrentIndex = 0;\n        this$static._additionalOffset = 0;\n    }\n    \n    function $MovePos(this$static, num) {\n        if (num > 0) {\n            $Skip(this$static._matchFinder, num);\n            this$static._additionalOffset += num;\n        }\n    }\n    \n    function $ReadMatchDistances(this$static) {\n        var lenRes = 0;\n        this$static._numDistancePairs = $GetMatches(this$static._matchFinder, this$static._matchDistances);\n        if (this$static._numDistancePairs > 0) {\n            lenRes = this$static._matchDistances[this$static._numDistancePairs - 2];\n            if (lenRes == this$static._numFastBytes)\n            lenRes += $GetMatchLen(this$static._matchFinder, lenRes - 1, this$static._matchDistances[this$static._numDistancePairs - 1], 273 - lenRes);\n        }\n        ++this$static._additionalOffset;\n        return lenRes;\n    }\n    \n    function $ReleaseMFStream(this$static) {\n        if (this$static._matchFinder && this$static._needReleaseMFStream) {\n            this$static._matchFinder._stream = null;\n            this$static._needReleaseMFStream = 0;\n        }\n    }\n    \n    function $ReleaseStreams(this$static) {\n        $ReleaseMFStream(this$static);\n        this$static._rangeEncoder.Stream = null;\n    }\n    \n    function $SetDictionarySize_0(this$static, dictionarySize) {\n        this$static._dictionarySize = dictionarySize;\n        for (var dicLogSize = 0; dictionarySize > 1 << dicLogSize; ++dicLogSize) {}\n        this$static._distTableSize = dicLogSize * 2;\n    }\n    \n    function $SetMatchFinder(this$static, matchFinderIndex) {\n        var matchFinderIndexPrev = this$static._matchFinderType;\n        this$static._matchFinderType = matchFinderIndex;\n        if (this$static._matchFinder && matchFinderIndexPrev != this$static._matchFinderType) {\n            this$static._dictionarySizePrev = -1;\n            this$static._matchFinder = null;\n        }\n    }\n    \n    function $WriteCoderProperties(this$static, outStream) {\n        this$static.properties[0] = (this$static._posStateBits * 5 + this$static._numLiteralPosStateBits) * 9 + this$static._numLiteralContextBits << 24 >> 24;\n        for (var i = 0; i < 4; ++i) {\n            this$static.properties[1 + i] = this$static._dictionarySize >> 8 * i << 24 >> 24;\n        }\n        $write_0(outStream, this$static.properties, 0, 5);\n    }\n    \n    function $WriteEndMarker(this$static, posState) {\n        if (!this$static._writeEndMark) {\n            return;\n        }\n        $Encode_3(this$static._rangeEncoder, this$static._isMatch, (this$static._state << 4) + posState, 1);\n        $Encode_3(this$static._rangeEncoder, this$static._isRep, this$static._state, 0);\n        this$static._state = this$static._state < 7?7:10;\n        $Encode_0(this$static._lenEncoder, this$static._rangeEncoder, 0, posState);\n        var lenToPosState = GetLenToPosState(2);\n        $Encode_2(this$static._posSlotEncoder[lenToPosState], this$static._rangeEncoder, 63);\n        $EncodeDirectBits(this$static._rangeEncoder, 67108863, 26);\n        $ReverseEncode(this$static._posAlignEncoder, this$static._rangeEncoder, 15);\n    }\n    \n    function GetPosSlot(pos) {\n        if (pos < 2048) {\n            return g_FastPos[pos];\n        }\n        if (pos < 2097152) {\n            return g_FastPos[pos >> 10] + 20;\n        }\n        return g_FastPos[pos >> 20] + 40;\n    }\n    \n    function GetPosSlot2(pos) {\n        if (pos < 131072) {\n            return g_FastPos[pos >> 6] + 12;\n        }\n        if (pos < 134217728) {\n            return g_FastPos[pos >> 16] + 32;\n        }\n        return g_FastPos[pos >> 26] + 52;\n    }\n    \n    function $Encode(this$static, rangeEncoder, symbol, posState) {\n        if (symbol < 8) {\n            $Encode_3(rangeEncoder, this$static._choice, 0, 0);\n            $Encode_2(this$static._lowCoder[posState], rangeEncoder, symbol);\n        } else {\n            symbol -= 8;\n            $Encode_3(rangeEncoder, this$static._choice, 0, 1);\n            if (symbol < 8) {\n                $Encode_3(rangeEncoder, this$static._choice, 1, 0);\n                $Encode_2(this$static._midCoder[posState], rangeEncoder, symbol);\n            } else {\n                $Encode_3(rangeEncoder, this$static._choice, 1, 1);\n                $Encode_2(this$static._highCoder, rangeEncoder, symbol - 8);\n            }\n        }\n    }\n    \n    function $Encoder$LenEncoder(this$static) {\n        this$static._choice = initDim(2);\n        this$static._lowCoder = initDim(16);\n        this$static._midCoder = initDim(16);\n        this$static._highCoder = $BitTreeEncoder({}, 8);\n        for (var posState = 0; posState < 16; ++posState) {\n            this$static._lowCoder[posState] = $BitTreeEncoder({}, 3);\n            this$static._midCoder[posState] = $BitTreeEncoder({}, 3);\n        }\n        return this$static;\n    }\n    \n    function $Init_2(this$static, numPosStates) {\n        InitBitModels(this$static._choice);\n        for (var posState = 0; posState < numPosStates; ++posState) {\n            InitBitModels(this$static._lowCoder[posState].Models);\n            InitBitModels(this$static._midCoder[posState].Models);\n        }\n        InitBitModels(this$static._highCoder.Models);\n    }\n    \n    function $SetPrices(this$static, posState, numSymbols, prices, st) {\n        var a0, a1, b0, b1, i;\n        a0 = ProbPrices[this$static._choice[0] >>> 2];\n        a1 = ProbPrices[2048 - this$static._choice[0] >>> 2];\n        b0 = a1 + ProbPrices[this$static._choice[1] >>> 2];\n        b1 = a1 + ProbPrices[2048 - this$static._choice[1] >>> 2];\n        i = 0;\n        for (i = 0; i < 8; ++i) {\n            if (i >= numSymbols)\n            return;\n            prices[st + i] = a0 + $GetPrice_1(this$static._lowCoder[posState], i);\n        }\n        for (; i < 16; ++i) {\n            if (i >= numSymbols)\n            return;\n            prices[st + i] = b0 + $GetPrice_1(this$static._midCoder[posState], i - 8);\n        }\n        for (; i < numSymbols; ++i) {\n            prices[st + i] = b1 + $GetPrice_1(this$static._highCoder, i - 8 - 8);\n        }\n    }\n    \n    function $Encode_0(this$static, rangeEncoder, symbol, posState) {\n        $Encode(this$static, rangeEncoder, symbol, posState);\n        if (--this$static._counters[posState] == 0) {\n            $SetPrices(this$static, posState, this$static._tableSize, this$static._prices, posState * 272);\n            this$static._counters[posState] = this$static._tableSize;\n        }\n    }\n    \n    function $Encoder$LenPriceTableEncoder(this$static) {\n        $Encoder$LenEncoder(this$static);\n        this$static._prices = [];\n        this$static._counters = [];\n        return this$static;\n    }\n    \n    function $GetPrice(this$static, symbol, posState) {\n        return this$static._prices[posState * 272 + symbol];\n    }\n    \n    function $UpdateTables(this$static, numPosStates) {\n        for (var posState = 0; posState < numPosStates; ++posState) {\n            $SetPrices(this$static, posState, this$static._tableSize, this$static._prices, posState * 272);\n            this$static._counters[posState] = this$static._tableSize;\n        }\n    }\n    \n    function $Create_1(this$static, numPosBits, numPrevBits) {\n        var i, numStates;\n        if (this$static.m_Coders != null && this$static.m_NumPrevBits == numPrevBits && this$static.m_NumPosBits == numPosBits) {\n            return;\n        }\n        this$static.m_NumPosBits = numPosBits;\n        this$static.m_PosMask = (1 << numPosBits) - 1;\n        this$static.m_NumPrevBits = numPrevBits;\n        numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\n        this$static.m_Coders = initDim(numStates);\n        for (i = 0; i < numStates; ++i) {\n            this$static.m_Coders[i] = $Encoder$LiteralEncoder$Encoder2({});\n        }\n    }\n    \n    function $GetSubCoder(this$static, pos, prevByte) {\n        return this$static.m_Coders[((pos & this$static.m_PosMask) << this$static.m_NumPrevBits) + ((prevByte & 255) >>> 8 - this$static.m_NumPrevBits)];\n    }\n    \n    function $Init_3(this$static) {\n        var i, numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\n        for (i = 0; i < numStates; ++i) {\n            InitBitModels(this$static.m_Coders[i].m_Encoders);\n        }\n    }\n    \n    function $Encode_1(this$static, rangeEncoder, symbol) {\n        var bit, i, context = 1;\n        for (i = 7; i >= 0; --i) {\n            bit = symbol >> i & 1;\n            $Encode_3(rangeEncoder, this$static.m_Encoders, context, bit);\n            context = context << 1 | bit;\n        }\n    }\n    \n    function $EncodeMatched(this$static, rangeEncoder, matchByte, symbol) {\n        var bit, i, matchBit, state, same = 1, context = 1;\n        for (i = 7; i >= 0; --i) {\n            bit = symbol >> i & 1;\n            state = context;\n            if (same) {\n                matchBit = matchByte >> i & 1;\n                state += 1 + matchBit << 8;\n                same = matchBit == bit;\n            }\n            $Encode_3(rangeEncoder, this$static.m_Encoders, state, bit);\n            context = context << 1 | bit;\n        }\n    }\n    \n    function $Encoder$LiteralEncoder$Encoder2(this$static) {\n        this$static.m_Encoders = initDim(768);\n        return this$static;\n    }\n    \n    function $GetPrice_0(this$static, matchMode, matchByte, symbol) {\n        var bit, context = 1, i = 7, matchBit, price = 0;\n        if (matchMode) {\n            for (; i >= 0; --i) {\n                matchBit = matchByte >> i & 1;\n                bit = symbol >> i & 1;\n                price += GetPrice(this$static.m_Encoders[(1 + matchBit << 8) + context], bit);\n                context = context << 1 | bit;\n                if (matchBit != bit) {\n                    --i;\n                    break;\n                }\n            }\n        }\n        for (; i >= 0; --i) {\n            bit = symbol >> i & 1;\n            price += GetPrice(this$static.m_Encoders[context], bit);\n            context = context << 1 | bit;\n        }\n        return price;\n    }\n    \n    function $MakeAsChar(this$static) {\n        this$static.BackPrev = -1;\n        this$static.Prev1IsChar = 0;\n    }\n    \n    function $MakeAsShortRep(this$static) {\n        this$static.BackPrev = 0;\n        this$static.Prev1IsChar = 0;\n    }\n    /** ce */\n    /** ds */\n    function $BitTreeDecoder(this$static, numBitLevels) {\n        this$static.NumBitLevels = numBitLevels;\n        this$static.Models = initDim(1 << numBitLevels);\n        return this$static;\n    }\n    \n    function $Decode_0(this$static, rangeDecoder) {\n        var bitIndex, m = 1;\n        for (bitIndex = this$static.NumBitLevels; bitIndex != 0; --bitIndex) {\n            m = (m << 1) + $DecodeBit(rangeDecoder, this$static.Models, m);\n        }\n        return m - (1 << this$static.NumBitLevels);\n    }\n    \n    function $ReverseDecode(this$static, rangeDecoder) {\n        var bit, bitIndex, m = 1, symbol = 0;\n        for (bitIndex = 0; bitIndex < this$static.NumBitLevels; ++bitIndex) {\n            bit = $DecodeBit(rangeDecoder, this$static.Models, m);\n            m <<= 1;\n            m += bit;\n            symbol |= bit << bitIndex;\n        }\n        return symbol;\n    }\n    \n    function ReverseDecode(Models, startIndex, rangeDecoder, NumBitLevels) {\n        var bit, bitIndex, m = 1, symbol = 0;\n        for (bitIndex = 0; bitIndex < NumBitLevels; ++bitIndex) {\n            bit = $DecodeBit(rangeDecoder, Models, startIndex + m);\n            m <<= 1;\n            m += bit;\n            symbol |= bit << bitIndex;\n        }\n        return symbol;\n    }\n    /** de */\n    /** cs */\n    function $BitTreeEncoder(this$static, numBitLevels) {\n        this$static.NumBitLevels = numBitLevels;\n        this$static.Models = initDim(1 << numBitLevels);\n        return this$static;\n    }\n    \n    function $Encode_2(this$static, rangeEncoder, symbol) {\n        var bit, bitIndex, m = 1;\n        for (bitIndex = this$static.NumBitLevels; bitIndex != 0;) {\n            --bitIndex;\n            bit = symbol >>> bitIndex & 1;\n            $Encode_3(rangeEncoder, this$static.Models, m, bit);\n            m = m << 1 | bit;\n        }\n    }\n    \n    function $GetPrice_1(this$static, symbol) {\n        var bit, bitIndex, m = 1, price = 0;\n        for (bitIndex = this$static.NumBitLevels; bitIndex != 0;) {\n            --bitIndex;\n            bit = symbol >>> bitIndex & 1;\n            price += GetPrice(this$static.Models[m], bit);\n            m = (m << 1) + bit;\n        }\n        return price;\n    }\n    \n    function $ReverseEncode(this$static, rangeEncoder, symbol) {\n        var bit, i, m = 1;\n        for (i = 0; i < this$static.NumBitLevels; ++i) {\n            bit = symbol & 1;\n            $Encode_3(rangeEncoder, this$static.Models, m, bit);\n            m = m << 1 | bit;\n            symbol >>= 1;\n        }\n    }\n    \n    function $ReverseGetPrice(this$static, symbol) {\n        var bit, i, m = 1, price = 0;\n        for (i = this$static.NumBitLevels; i != 0; --i) {\n            bit = symbol & 1;\n            symbol >>>= 1;\n            price += GetPrice(this$static.Models[m], bit);\n            m = m << 1 | bit;\n        }\n        return price;\n    }\n    \n    function ReverseEncode(Models, startIndex, rangeEncoder, NumBitLevels, symbol) {\n        var bit, i, m = 1;\n        for (i = 0; i < NumBitLevels; ++i) {\n            bit = symbol & 1;\n            $Encode_3(rangeEncoder, Models, startIndex + m, bit);\n            m = m << 1 | bit;\n            symbol >>= 1;\n        }\n    }\n    \n    function ReverseGetPrice(Models, startIndex, NumBitLevels, symbol) {\n        var bit, i, m = 1, price = 0;\n        for (i = NumBitLevels; i != 0; --i) {\n            bit = symbol & 1;\n            symbol >>>= 1;\n            price += ProbPrices[((Models[startIndex + m] - bit ^ -bit) & 2047) >>> 2];\n            m = m << 1 | bit;\n        }\n        return price;\n    }\n    /** ce */\n    /** ds */\n    function $DecodeBit(this$static, probs, index) {\n        var newBound, prob = probs[index];\n        newBound = (this$static.Range >>> 11) * prob;\n        if ((this$static.Code ^ -2147483648) < (newBound ^ -2147483648)) {\n            this$static.Range = newBound;\n            probs[index] = prob + (2048 - prob >>> 5) << 16 >> 16;\n            if (!(this$static.Range & -16777216)) {\n                this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\n                this$static.Range <<= 8;\n            }\n            return 0;\n        } else {\n            this$static.Range -= newBound;\n            this$static.Code -= newBound;\n            probs[index] = prob - (prob >>> 5) << 16 >> 16;\n            if (!(this$static.Range & -16777216)) {\n                this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\n                this$static.Range <<= 8;\n            }\n            return 1;\n        }\n    }\n    \n    function $DecodeDirectBits(this$static, numTotalBits) {\n        var i, t, result = 0;\n        for (i = numTotalBits; i != 0; --i) {\n            this$static.Range >>>= 1;\n            t = this$static.Code - this$static.Range >>> 31;\n            this$static.Code -= this$static.Range & t - 1;\n            result = result << 1 | 1 - t;\n            if (!(this$static.Range & -16777216)) {\n                this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\n                this$static.Range <<= 8;\n            }\n        }\n        return result;\n    }\n    \n    function $Init_8(this$static) {\n        this$static.Code = 0;\n        this$static.Range = -1;\n        for (var i = 0; i < 5; ++i) {\n            this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\n        }\n    }\n    /** de */\n    \n    function InitBitModels(probs) {\n        for (var i = probs.length - 1; i >= 0; --i) {\n            probs[i] = 1024;\n        }\n    }\n    /** cs */\n    var ProbPrices = (function () {\n        var end, i, j, start, ProbPrices = [];\n        for (i = 8; i >= 0; --i) {\n            start = 1 << 9 - i - 1;\n            end = 1 << 9 - i;\n            for (j = start; j < end; ++j) {\n                ProbPrices[j] = (i << 6) + (end - j << 6 >>> 9 - i - 1);\n            }\n        }\n        return ProbPrices;\n    }());\n    \n    function $Encode_3(this$static, probs, index, symbol) {\n        var newBound, prob = probs[index];\n        newBound = (this$static.Range >>> 11) * prob;\n        if (!symbol) {\n            this$static.Range = newBound;\n            probs[index] = prob + (2048 - prob >>> 5) << 16 >> 16;\n        } else {\n            this$static.Low = add(this$static.Low, and(fromInt(newBound), [4294967295, 0]));\n            this$static.Range -= newBound;\n            probs[index] = prob - (prob >>> 5) << 16 >> 16;\n        }\n        if (!(this$static.Range & -16777216)) {\n            this$static.Range <<= 8;\n            $ShiftLow(this$static);\n        }\n    }\n    \n    function $EncodeDirectBits(this$static, v, numTotalBits) {\n        for (var i = numTotalBits - 1; i >= 0; --i) {\n            this$static.Range >>>= 1;\n            if ((v >>> i & 1) == 1) {\n                this$static.Low = add(this$static.Low, fromInt(this$static.Range));\n            }\n            if (!(this$static.Range & -16777216)) {\n                this$static.Range <<= 8;\n                $ShiftLow(this$static);\n            }\n        }\n    }\n    \n    function $GetProcessedSizeAdd(this$static) {\n        return add(add(fromInt(this$static._cacheSize), this$static._position), [4, 0]);\n    }\n    \n    function $Init_9(this$static) {\n        this$static._position = P0_longLit;\n        this$static.Low = P0_longLit;\n        this$static.Range = -1;\n        this$static._cacheSize = 1;\n        this$static._cache = 0;\n    }\n    \n    function $ShiftLow(this$static) {\n        var temp, LowHi = lowBits_0(shru(this$static.Low, 32));\n        if (LowHi != 0 || compare(this$static.Low, [4278190080, 0]) < 0) {\n            this$static._position = add(this$static._position, fromInt(this$static._cacheSize));\n            temp = this$static._cache;\n            do {\n                $write(this$static.Stream, temp + LowHi);\n                temp = 255;\n            } while (--this$static._cacheSize != 0);\n            this$static._cache = lowBits_0(this$static.Low) >>> 24;\n        }\n        ++this$static._cacheSize;\n        this$static.Low = shl(and(this$static.Low, [16777215, 0]), 8);\n    }\n    \n    function GetPrice(Prob, symbol) {\n        return ProbPrices[((Prob - symbol ^ -symbol) & 2047) >>> 2];\n    }\n    \n    /** ce */\n    /** ds */\n    function decode(utf) {\n        var i = 0, j = 0, x, y, z, l = utf.length, buf = [], charCodes = [];\n        for (; i < l; ++i, ++j) {\n            x = utf[i] & 255;\n            if (!(x & 128)) {\n                if (!x) {\n                    /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\n                    return utf;\n                }\n                charCodes[j] = x;\n            } else if ((x & 224) == 192) {\n                if (i + 1 >= l) {\n                    /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\n                    return utf;\n                }\n                y = utf[++i] & 255;\n                if ((y & 192) != 128) {\n                    /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\n                    return utf;\n                }\n                charCodes[j] = ((x & 31) << 6) | (y & 63);\n            } else if ((x & 240) == 224) {\n                if (i + 2 >= l) {\n                    /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\n                    return utf;\n                }\n                y = utf[++i] & 255;\n                if ((y & 192) != 128) {\n                    /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\n                    return utf;\n                }\n                z = utf[++i] & 255;\n                if ((z & 192) != 128) {\n                    /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\n                    return utf;\n                }\n                charCodes[j] = ((x & 15) << 12) | ((y & 63) << 6) | (z & 63);\n            } else {\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\n                return utf;\n            }\n            if (j == 16383) {\n                buf.push(String.fromCharCode.apply(String, charCodes));\n                j = -1;\n            }\n        }\n        if (j > 0) {\n            charCodes.length = j;\n            buf.push(String.fromCharCode.apply(String, charCodes));\n        }\n        return buf.join(\"\");\n    }\n    /** de */\n    /** cs */\n    function encode(s) {\n        var ch, chars = [], data, elen = 0, i, l = s.length;\n        /// Be able to handle binary arrays and buffers.\n        if (typeof s == \"object\") {\n            return s;\n        } else {\n            $getChars(s, 0, l, chars, 0);\n        }\n        /// Add extra spaces in the array to break up the unicode symbols.\n        for (i = 0; i < l; ++i) {\n            ch = chars[i];\n            if (ch >= 1 && ch <= 127) {\n                ++elen;\n            } else if (!ch || ch >= 128 && ch <= 2047) {\n                elen += 2;\n            } else {\n                elen += 3;\n            }\n        }\n        data = [];\n        elen = 0;\n        for (i = 0; i < l; ++i) {\n            ch = chars[i];\n            if (ch >= 1 && ch <= 127) {\n                data[elen++] = ch << 24 >> 24;\n            } else if (!ch || ch >= 128 && ch <= 2047) {\n                data[elen++] = (192 | ch >> 6 & 31) << 24 >> 24;\n                data[elen++] = (128 | ch & 63) << 24 >> 24;\n            } else {\n                data[elen++] = (224 | ch >> 12 & 15) << 24 >> 24;\n                data[elen++] = (128 | ch >> 6 & 63) << 24 >> 24;\n                data[elen++] = (128 | ch & 63) << 24 >> 24;\n            }\n        }\n        return data;\n    }\n    /** ce */\n    \n    function toDouble(a) {\n        return a[1] + a[0];\n    }\n    \n    /** cs */\n    function compress(str, mode, on_finish, on_progress) {\n        var this$static = {},\n            percent,\n            cbn, /// A callback number should be supplied instead of on_finish() if we are using Web Workers.\n            sync = typeof on_finish == \"undefined\" && typeof on_progress == \"undefined\";\n        \n        if (typeof on_finish != \"function\") {\n            cbn = on_finish;\n            on_finish = on_progress = 0;\n        }\n        \n        on_progress = on_progress || function(percent) {\n            if (typeof cbn == \"undefined\")\n                return;\n            \n            return update_progress(percent, cbn);\n        };\n        \n        on_finish = on_finish || function(res, err) {\n            if (typeof cbn == \"undefined\")\n                return;\n            \n            return postMessage({\n                action: action_compress,\n                cbn: cbn,\n                result: res,\n                error: err\n            });\n        };\n\n        if (sync) {\n            this$static.c = $LZMAByteArrayCompressor({}, encode(str), get_mode_obj(mode));\n            while ($processChunk(this$static.c.chunker));\n            return $toByteArray(this$static.c.output);\n        }\n        \n        try {\n            this$static.c = $LZMAByteArrayCompressor({}, encode(str), get_mode_obj(mode));\n            \n            on_progress(0);\n        } catch (err) {\n            return on_finish(null, err);\n        }\n        \n        function do_action() {\n            try {\n                var res, start = (new Date()).getTime();\n                \n                while ($processChunk(this$static.c.chunker)) {\n                    percent = toDouble(this$static.c.chunker.inBytesProcessed) / toDouble(this$static.c.length_0);\n                    /// If about 200 miliseconds have passed, update the progress.\n                    if ((new Date()).getTime() - start > 200) {\n                        on_progress(percent);\n                        \n                        wait(do_action, 0);\n                        return 0;\n                    }\n                }\n                \n                on_progress(1);\n                \n                res = $toByteArray(this$static.c.output);\n                \n                /// delay so we don’t catch errors from the on_finish handler\n                wait(on_finish.bind(null, res), 0);\n            } catch (err) {\n                on_finish(null, err);\n            }\n        }\n        \n        ///NOTE: We need to wait to make sure it is always async.\n        wait(do_action, 0);\n    }\n    /** ce */\n    /** ds */\n    function decompress(byte_arr, on_finish, on_progress) {\n        var this$static = {},\n            percent,\n            cbn, /// A callback number should be supplied instead of on_finish() if we are using Web Workers.\n            has_progress,\n            len,\n            sync = typeof on_finish == \"undefined\" && typeof on_progress == \"undefined\";\n\n        if (typeof on_finish != \"function\") {\n            cbn = on_finish;\n            on_finish = on_progress = 0;\n        }\n        \n        on_progress = on_progress || function(percent) {\n            if (typeof cbn == \"undefined\")\n                return;\n            \n            return update_progress(has_progress ? percent : -1, cbn);\n        };\n        \n        on_finish = on_finish || function(res, err) {\n            if (typeof cbn == \"undefined\")\n                return;\n            \n            return postMessage({\n                action: action_decompress,\n                cbn: cbn,\n                result: res,\n                error: err\n            });\n        };\n\n        if (sync) {\n            this$static.d = $LZMAByteArrayDecompressor({}, byte_arr);\n            while ($processChunk(this$static.d.chunker));\n            return decode($toByteArray(this$static.d.output));\n        }\n        \n        try {\n            this$static.d = $LZMAByteArrayDecompressor({}, byte_arr);\n            \n            len = toDouble(this$static.d.length_0);\n            \n            ///NOTE: If the data was created via a stream, it will not have a length value, and therefore we can't calculate the progress.\n            has_progress = len > -1;\n            \n            on_progress(0);\n        } catch (err) {\n            return on_finish(null, err);\n        }\n        \n        function do_action() {\n            try {\n                var res, i = 0, start = (new Date()).getTime();\n                while ($processChunk(this$static.d.chunker)) {\n                    if (++i % 1000 == 0 && (new Date()).getTime() - start > 200) {\n                        if (has_progress) {\n                            percent = toDouble(this$static.d.chunker.decoder.nowPos64) / len;\n                            /// If about 200 miliseconds have passed, update the progress.\n                            on_progress(percent);\n                        }\n                        \n                        ///NOTE: This allows other code to run, like the browser to update.\n                        wait(do_action, 0);\n                        return 0;\n                    }\n                }\n                \n                on_progress(1);\n                \n                res = decode($toByteArray(this$static.d.output));\n                \n                /// delay so we don’t catch errors from the on_finish handler\n                wait(on_finish.bind(null, res), 0);\n            } catch (err) {\n                on_finish(null, err);\n            }\n        }\n        \n        ///NOTE: We need to wait to make sure it is always async.\n        wait(do_action, 0);\n    }\n    /** de */\n    /** cs */\n    var get_mode_obj = (function () {\n        /// s is dictionarySize\n        /// f is fb\n        /// m is matchFinder\n        ///NOTE: Because some values are always the same, they have been removed.\n        /// lc is always 3\n        /// lp is always 0\n        /// pb is always 2\n        var modes = [\n            {s: 16, f:  64, m: 0},\n            {s: 20, f:  64, m: 0},\n            {s: 19, f:  64, m: 1},\n            {s: 20, f:  64, m: 1},\n            {s: 21, f: 128, m: 1},\n            {s: 22, f: 128, m: 1},\n            {s: 23, f: 128, m: 1},\n            {s: 24, f: 255, m: 1},\n            {s: 25, f: 255, m: 1}\n        ];\n        \n        return function (mode) {\n            return modes[mode - 1] || modes[6];\n        };\n    }());\n    /** ce */\n    \n    /// If we're in a Web Worker, create the onmessage() communication channel.\n    ///NOTE: This seems to be the most reliable way to detect this.\n    if (typeof onmessage != \"undefined\" && (typeof window == \"undefined\" || typeof window.document == \"undefined\")) {\n        (function () {\n            /* jshint -W020 */\n            /// Create the global onmessage function.\n            onmessage = function (e) {\n                if (e && e.data) {\n                    /** xs */\n                    if (e.data.action == action_decompress) {\n                        LZMA.decompress(e.data.data, e.data.cbn);\n                    } else if (e.data.action == action_compress) {\n                        LZMA.compress(e.data.data, e.data.mode, e.data.cbn);\n                    }\n                    /** xe */\n                    /// co:if (e.data.action == action_compress) {\n                    /// co:    LZMA.compress(e.data.data, e.data.mode, e.data.cbn);\n                    /// co:}\n                    /// do:if (e.data.action == action_decompress) {\n                    /// do:    LZMA.decompress(e.data.data, e.data.cbn);\n                    /// do:}\n                }\n            };\n        }());\n    }\n        \n    return {\n        /** xs */\n        compress:   compress,\n        decompress: decompress,\n        /** xe */\n        /// co:compress:   compress\n        /// do:decompress: decompress\n    };\n}());\n\n/// This is used by browsers that do not support web workers (and possibly Node.js).\nthis.LZMA = this.LZMA_WORKER = LZMA;\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar $toString = require('./_function-to-string');\nvar TO_STRING = 'toString';\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","module.exports = false;\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","var core = module.exports = { version: '2.6.9' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","!function(factory) {\n    var global = this;\n    module.exports = factory(global);\n}(function(global) {\n    \"use strict\";\n    function is(obj, Ctor) {\n        return \"object\" != typeof obj || null === obj ? !1 : obj.constructor === Ctor || Object.prototype.toString.call(obj) === \"[object \" + Ctor.name + \"]\";\n    }\n    function arrayFrom(arrayLike, forceCopy) {\n        return !forceCopy && is(arrayLike, Array) ? arrayLike : Array.prototype.slice.call(arrayLike);\n    }\n    function defined(value, defaultValue) {\n        return void 0 !== value ? value : defaultValue;\n    }\n    function jDataView(buffer, byteOffset, byteLength, littleEndian) {\n        if (jDataView.is(buffer)) {\n            var result = buffer.slice(byteOffset, byteOffset + byteLength);\n            return result._littleEndian = defined(littleEndian, result._littleEndian), result;\n        }\n        if (!jDataView.is(this)) return new jDataView(buffer, byteOffset, byteLength, littleEndian);\n        if (this.buffer = buffer = jDataView.wrapBuffer(buffer), this._isArrayBuffer = compatibility.ArrayBuffer && is(buffer, ArrayBuffer), \n        this._isPixelData = !1, this._isDataView = compatibility.DataView && this._isArrayBuffer, \n        this._isNodeBuffer = !0 && compatibility.NodeBuffer && is(buffer, Buffer), !this._isNodeBuffer && !this._isArrayBuffer && !is(buffer, Array)) throw new TypeError(\"jDataView buffer has an incompatible type\");\n        this._littleEndian = !!littleEndian;\n        var bufferLength = \"byteLength\" in buffer ? buffer.byteLength : buffer.length;\n        this.byteOffset = byteOffset = defined(byteOffset, 0), this.byteLength = byteLength = defined(byteLength, bufferLength - byteOffset), \n        this._offset = this._bitOffset = 0, this._isDataView ? this._view = new DataView(buffer, byteOffset, byteLength) : this._checkBounds(byteOffset, byteLength, bufferLength), \n        this._engineAction = this._isDataView ? this._dataViewAction : this._isNodeBuffer ? this._nodeBufferAction : this._isArrayBuffer ? this._arrayBufferAction : this._arrayAction;\n    }\n    function getCharCodes(string) {\n        if (compatibility.NodeBuffer) return new Buffer(string, \"binary\");\n        for (var Type = compatibility.ArrayBuffer ? Uint8Array : Array, codes = new Type(string.length), i = 0, length = string.length; length > i; i++) codes[i] = 255 & string.charCodeAt(i);\n        return codes;\n    }\n    function pow2(n) {\n        return n >= 0 && 31 > n ? 1 << n : pow2[n] || (pow2[n] = Math.pow(2, n));\n    }\n    function Uint64(lo, hi) {\n        this.lo = lo, this.hi = hi;\n    }\n    function Int64() {\n        Uint64.apply(this, arguments);\n    }\n    var compatibility = {\n        NodeBuffer: !0 && \"Buffer\" in global,\n        DataView: \"DataView\" in global,\n        ArrayBuffer: \"ArrayBuffer\" in global,\n        PixelData: !1\n    }, TextEncoder = global.TextEncoder, TextDecoder = global.TextDecoder;\n    compatibility.NodeBuffer && !function(buffer) {\n        try {\n            buffer.writeFloatLE(1/0, 0);\n        } catch (e) {\n            compatibility.NodeBuffer = !1;\n        }\n    }(new Buffer(4));\n    var dataTypes = {\n        Int8: 1,\n        Int16: 2,\n        Int32: 4,\n        Uint8: 1,\n        Uint16: 2,\n        Uint32: 4,\n        Float32: 4,\n        Float64: 8\n    };\n    jDataView.wrapBuffer = function(buffer) {\n        switch (typeof buffer) {\n          case \"number\":\n            if (compatibility.NodeBuffer) buffer = new Buffer(buffer), buffer.fill(0); else if (compatibility.ArrayBuffer) buffer = new Uint8Array(buffer).buffer; else {\n                buffer = new Array(buffer);\n                for (var i = 0; i < buffer.length; i++) buffer[i] = 0;\n            }\n            return buffer;\n\n          case \"string\":\n            buffer = getCharCodes(buffer);\n\n          default:\n            return \"length\" in buffer && !(compatibility.NodeBuffer && is(buffer, Buffer) || compatibility.ArrayBuffer && is(buffer, ArrayBuffer)) && (compatibility.NodeBuffer ? buffer = new Buffer(buffer) : compatibility.ArrayBuffer ? is(buffer, ArrayBuffer) || (buffer = new Uint8Array(buffer).buffer, \n            is(buffer, ArrayBuffer) || (buffer = new Uint8Array(arrayFrom(buffer, !0)).buffer)) : buffer = arrayFrom(buffer)), \n            buffer;\n        }\n    }, jDataView.is = function(view) {\n        return view && view.jDataView;\n    }, jDataView.from = function() {\n        return new jDataView(arguments);\n    }, jDataView.Uint64 = Uint64, Uint64.prototype = {\n        valueOf: function() {\n            return this.lo + pow2(32) * this.hi;\n        },\n        toString: function() {\n            return Number.prototype.toString.apply(this.valueOf(), arguments);\n        }\n    }, Uint64.fromNumber = function(number) {\n        var hi = Math.floor(number / pow2(32)), lo = number - hi * pow2(32);\n        return new Uint64(lo, hi);\n    }, jDataView.Int64 = Int64, Int64.prototype = \"create\" in Object ? Object.create(Uint64.prototype) : new Uint64(), \n    Int64.prototype.valueOf = function() {\n        return this.hi < pow2(31) ? Uint64.prototype.valueOf.apply(this, arguments) : -(pow2(32) - this.lo + pow2(32) * (pow2(32) - 1 - this.hi));\n    }, Int64.fromNumber = function(number) {\n        var lo, hi;\n        if (number >= 0) {\n            var unsigned = Uint64.fromNumber(number);\n            lo = unsigned.lo, hi = unsigned.hi;\n        } else hi = Math.floor(number / pow2(32)), lo = number - hi * pow2(32), hi += pow2(32);\n        return new Int64(lo, hi);\n    };\n    var proto = jDataView.prototype = {\n        compatibility: compatibility,\n        jDataView: !0,\n        _checkBounds: function(byteOffset, byteLength, maxLength) {\n            if (\"number\" != typeof byteOffset) throw new TypeError(\"Offset is not a number.\");\n            if (\"number\" != typeof byteLength) throw new TypeError(\"Size is not a number.\");\n            if (0 > byteLength) throw new RangeError(\"Length is negative.\");\n            if (0 > byteOffset || byteOffset + byteLength > defined(maxLength, this.byteLength)) throw new RangeError(\"Offsets are out of bounds.\");\n        },\n        _action: function(type, isReadAction, byteOffset, littleEndian, value) {\n            return this._engineAction(type, isReadAction, defined(byteOffset, this._offset), defined(littleEndian, this._littleEndian), value);\n        },\n        _dataViewAction: function(type, isReadAction, byteOffset, littleEndian, value) {\n            return this._offset = byteOffset + dataTypes[type], isReadAction ? this._view[\"get\" + type](byteOffset, littleEndian) : this._view[\"set\" + type](byteOffset, value, littleEndian);\n        },\n        _arrayBufferAction: function(type, isReadAction, byteOffset, littleEndian, value) {\n            var typedArray, size = dataTypes[type], TypedArray = global[type + \"Array\"];\n            if (littleEndian = defined(littleEndian, this._littleEndian), 1 === size || (this.byteOffset + byteOffset) % size === 0 && littleEndian) return typedArray = new TypedArray(this.buffer, this.byteOffset + byteOffset, 1), \n            this._offset = byteOffset + size, isReadAction ? typedArray[0] : typedArray[0] = value;\n            var bytes = new Uint8Array(isReadAction ? this.getBytes(size, byteOffset, littleEndian, !0) : size);\n            return typedArray = new TypedArray(bytes.buffer, 0, 1), isReadAction ? typedArray[0] : (typedArray[0] = value, \n            void this._setBytes(byteOffset, bytes, littleEndian));\n        },\n        _arrayAction: function(type, isReadAction, byteOffset, littleEndian, value) {\n            return isReadAction ? this[\"_get\" + type](byteOffset, littleEndian) : this[\"_set\" + type](byteOffset, value, littleEndian);\n        },\n        _getBytes: function(length, byteOffset, littleEndian) {\n            littleEndian = defined(littleEndian, this._littleEndian), byteOffset = defined(byteOffset, this._offset), \n            length = defined(length, this.byteLength - byteOffset), this._checkBounds(byteOffset, length), \n            byteOffset += this.byteOffset, this._offset = byteOffset - this.byteOffset + length;\n            var result = this._isArrayBuffer ? new Uint8Array(this.buffer, byteOffset, length) : (this.buffer.slice || Array.prototype.slice).call(this.buffer, byteOffset, byteOffset + length);\n            return littleEndian || 1 >= length ? result : arrayFrom(result).reverse();\n        },\n        getBytes: function(length, byteOffset, littleEndian, toArray) {\n            var result = this._getBytes(length, byteOffset, defined(littleEndian, !0));\n            return toArray ? arrayFrom(result) : result;\n        },\n        _setBytes: function(byteOffset, bytes, littleEndian) {\n            var length = bytes.length;\n            if (0 !== length) {\n                if (littleEndian = defined(littleEndian, this._littleEndian), byteOffset = defined(byteOffset, this._offset), \n                this._checkBounds(byteOffset, length), !littleEndian && length > 1 && (bytes = arrayFrom(bytes, !0).reverse()), \n                byteOffset += this.byteOffset, this._isArrayBuffer) new Uint8Array(this.buffer, byteOffset, length).set(bytes); else if (this._isNodeBuffer) new Buffer(bytes).copy(this.buffer, byteOffset); else for (var i = 0; length > i; i++) this.buffer[byteOffset + i] = bytes[i];\n                this._offset = byteOffset - this.byteOffset + length;\n            }\n        },\n        setBytes: function(byteOffset, bytes, littleEndian) {\n            this._setBytes(byteOffset, bytes, defined(littleEndian, !0));\n        },\n        getString: function(byteLength, byteOffset, encoding) {\n            if (this._isNodeBuffer) return byteOffset = defined(byteOffset, this._offset), byteLength = defined(byteLength, this.byteLength - byteOffset), \n            this._checkBounds(byteOffset, byteLength), this._offset = byteOffset + byteLength, \n            this.buffer.toString(encoding || \"binary\", this.byteOffset + byteOffset, this.byteOffset + this._offset);\n            var bytes = this._getBytes(byteLength, byteOffset, !0);\n            if (encoding = \"utf8\" === encoding ? \"utf-8\" : encoding || \"binary\", TextDecoder && \"binary\" !== encoding) return new TextDecoder(encoding).decode(this._isArrayBuffer ? bytes : new Uint8Array(bytes));\n            var string = \"\";\n            byteLength = bytes.length;\n            for (var i = 0; byteLength > i; i++) string += String.fromCharCode(bytes[i]);\n            return \"utf-8\" === encoding && (string = decodeURIComponent(escape(string))), string;\n        },\n        setString: function(byteOffset, subString, encoding) {\n            if (this._isNodeBuffer) return byteOffset = defined(byteOffset, this._offset), this._checkBounds(byteOffset, subString.length), \n            void (this._offset = byteOffset + this.buffer.write(subString, this.byteOffset + byteOffset, encoding || \"binary\"));\n            encoding = \"utf8\" === encoding ? \"utf-8\" : encoding || \"binary\";\n            var bytes;\n            TextEncoder && \"binary\" !== encoding ? bytes = new TextEncoder(encoding).encode(subString) : (\"utf-8\" === encoding && (subString = unescape(encodeURIComponent(subString))), \n            bytes = getCharCodes(subString)), this._setBytes(byteOffset, bytes, !0);\n        },\n        getChar: function(byteOffset) {\n            return this.getString(1, byteOffset);\n        },\n        setChar: function(byteOffset, character) {\n            this.setString(byteOffset, character);\n        },\n        tell: function() {\n            return this._offset;\n        },\n        seek: function(byteOffset) {\n            return this._checkBounds(byteOffset, 0), this._offset = byteOffset;\n        },\n        skip: function(byteLength) {\n            return this.seek(this._offset + byteLength);\n        },\n        slice: function(start, end, forceCopy) {\n            function normalizeOffset(offset, byteLength) {\n                return 0 > offset ? offset + byteLength : offset;\n            }\n            return start = normalizeOffset(start, this.byteLength), end = normalizeOffset(defined(end, this.byteLength), this.byteLength), \n            forceCopy ? new jDataView(this.getBytes(end - start, start, !0, !0), void 0, void 0, this._littleEndian) : new jDataView(this.buffer, this.byteOffset + start, end - start, this._littleEndian);\n        },\n        alignBy: function(byteCount) {\n            return this._bitOffset = 0, 1 !== defined(byteCount, 1) ? this.skip(byteCount - (this._offset % byteCount || byteCount)) : this._offset;\n        },\n        _getFloat64: function(byteOffset, littleEndian) {\n            var b = this._getBytes(8, byteOffset, littleEndian), sign = 1 - 2 * (b[7] >> 7), exponent = ((b[7] << 1 & 255) << 3 | b[6] >> 4) - 1023, mantissa = (15 & b[6]) * pow2(48) + b[5] * pow2(40) + b[4] * pow2(32) + b[3] * pow2(24) + b[2] * pow2(16) + b[1] * pow2(8) + b[0];\n            return 1024 === exponent ? 0 !== mantissa ? 0/0 : 1/0 * sign : -1023 === exponent ? sign * mantissa * pow2(-1074) : sign * (1 + mantissa * pow2(-52)) * pow2(exponent);\n        },\n        _getFloat32: function(byteOffset, littleEndian) {\n            var b = this._getBytes(4, byteOffset, littleEndian), sign = 1 - 2 * (b[3] >> 7), exponent = (b[3] << 1 & 255 | b[2] >> 7) - 127, mantissa = (127 & b[2]) << 16 | b[1] << 8 | b[0];\n            return 128 === exponent ? 0 !== mantissa ? 0/0 : 1/0 * sign : -127 === exponent ? sign * mantissa * pow2(-149) : sign * (1 + mantissa * pow2(-23)) * pow2(exponent);\n        },\n        _get64: function(Type, byteOffset, littleEndian) {\n            littleEndian = defined(littleEndian, this._littleEndian), byteOffset = defined(byteOffset, this._offset);\n            for (var parts = littleEndian ? [ 0, 4 ] : [ 4, 0 ], i = 0; 2 > i; i++) parts[i] = this.getUint32(byteOffset + parts[i], littleEndian);\n            return this._offset = byteOffset + 8, new Type(parts[0], parts[1]);\n        },\n        getInt64: function(byteOffset, littleEndian) {\n            return this._get64(Int64, byteOffset, littleEndian);\n        },\n        getUint64: function(byteOffset, littleEndian) {\n            return this._get64(Uint64, byteOffset, littleEndian);\n        },\n        _getInt32: function(byteOffset, littleEndian) {\n            var b = this._getBytes(4, byteOffset, littleEndian);\n            return b[3] << 24 | b[2] << 16 | b[1] << 8 | b[0];\n        },\n        _getUint32: function(byteOffset, littleEndian) {\n            return this._getInt32(byteOffset, littleEndian) >>> 0;\n        },\n        _getInt16: function(byteOffset, littleEndian) {\n            return this._getUint16(byteOffset, littleEndian) << 16 >> 16;\n        },\n        _getUint16: function(byteOffset, littleEndian) {\n            var b = this._getBytes(2, byteOffset, littleEndian);\n            return b[1] << 8 | b[0];\n        },\n        _getInt8: function(byteOffset) {\n            return this._getUint8(byteOffset) << 24 >> 24;\n        },\n        _getUint8: function(byteOffset) {\n            return this._getBytes(1, byteOffset)[0];\n        },\n        _getBitRangeData: function(bitLength, byteOffset) {\n            var startBit = (defined(byteOffset, this._offset) << 3) + this._bitOffset, endBit = startBit + bitLength, start = startBit >>> 3, end = endBit + 7 >>> 3, b = this._getBytes(end - start, start, !0), wideValue = 0;\n            (this._bitOffset = 7 & endBit) && (this._bitOffset -= 8);\n            for (var i = 0, length = b.length; length > i; i++) wideValue = wideValue << 8 | b[i];\n            return {\n                start: start,\n                bytes: b,\n                wideValue: wideValue\n            };\n        },\n        getSigned: function(bitLength, byteOffset) {\n            var shift = 32 - bitLength;\n            return this.getUnsigned(bitLength, byteOffset) << shift >> shift;\n        },\n        getUnsigned: function(bitLength, byteOffset) {\n            var value = this._getBitRangeData(bitLength, byteOffset).wideValue >>> -this._bitOffset;\n            return 32 > bitLength ? value & ~(-1 << bitLength) : value;\n        },\n        _setBinaryFloat: function(byteOffset, value, mantSize, expSize, littleEndian) {\n            var exponent, mantissa, signBit = 0 > value ? 1 : 0, eMax = ~(-1 << expSize - 1), eMin = 1 - eMax;\n            0 > value && (value = -value), 0 === value ? (exponent = 0, mantissa = 0) : isNaN(value) ? (exponent = 2 * eMax + 1, \n            mantissa = 1) : 1/0 === value ? (exponent = 2 * eMax + 1, mantissa = 0) : (exponent = Math.floor(Math.log(value) / Math.LN2), \n            exponent >= eMin && eMax >= exponent ? (mantissa = Math.floor((value * pow2(-exponent) - 1) * pow2(mantSize)), \n            exponent += eMax) : (mantissa = Math.floor(value / pow2(eMin - mantSize)), exponent = 0));\n            for (var b = []; mantSize >= 8; ) b.push(mantissa % 256), mantissa = Math.floor(mantissa / 256), \n            mantSize -= 8;\n            for (exponent = exponent << mantSize | mantissa, expSize += mantSize; expSize >= 8; ) b.push(255 & exponent), \n            exponent >>>= 8, expSize -= 8;\n            b.push(signBit << expSize | exponent), this._setBytes(byteOffset, b, littleEndian);\n        },\n        _setFloat32: function(byteOffset, value, littleEndian) {\n            this._setBinaryFloat(byteOffset, value, 23, 8, littleEndian);\n        },\n        _setFloat64: function(byteOffset, value, littleEndian) {\n            this._setBinaryFloat(byteOffset, value, 52, 11, littleEndian);\n        },\n        _set64: function(Type, byteOffset, value, littleEndian) {\n            \"object\" != typeof value && (value = Type.fromNumber(value)), littleEndian = defined(littleEndian, this._littleEndian), \n            byteOffset = defined(byteOffset, this._offset);\n            var parts = littleEndian ? {\n                lo: 0,\n                hi: 4\n            } : {\n                lo: 4,\n                hi: 0\n            };\n            for (var partName in parts) this.setUint32(byteOffset + parts[partName], value[partName], littleEndian);\n            this._offset = byteOffset + 8;\n        },\n        setInt64: function(byteOffset, value, littleEndian) {\n            this._set64(Int64, byteOffset, value, littleEndian);\n        },\n        setUint64: function(byteOffset, value, littleEndian) {\n            this._set64(Uint64, byteOffset, value, littleEndian);\n        },\n        _setUint32: function(byteOffset, value, littleEndian) {\n            this._setBytes(byteOffset, [ 255 & value, value >>> 8 & 255, value >>> 16 & 255, value >>> 24 ], littleEndian);\n        },\n        _setUint16: function(byteOffset, value, littleEndian) {\n            this._setBytes(byteOffset, [ 255 & value, value >>> 8 & 255 ], littleEndian);\n        },\n        _setUint8: function(byteOffset, value) {\n            this._setBytes(byteOffset, [ 255 & value ]);\n        },\n        setUnsigned: function(byteOffset, value, bitLength) {\n            var data = this._getBitRangeData(bitLength, byteOffset), wideValue = data.wideValue, b = data.bytes;\n            wideValue &= ~(~(-1 << bitLength) << -this._bitOffset), wideValue |= (32 > bitLength ? value & ~(-1 << bitLength) : value) << -this._bitOffset;\n            for (var i = b.length - 1; i >= 0; i--) b[i] = 255 & wideValue, wideValue >>>= 8;\n            this._setBytes(data.start, b, !0);\n        }\n    }, nodeNaming = {\n        Int8: \"Int8\",\n        Int16: \"Int16\",\n        Int32: \"Int32\",\n        Uint8: \"UInt8\",\n        Uint16: \"UInt16\",\n        Uint32: \"UInt32\",\n        Float32: \"Float\",\n        Float64: \"Double\"\n    };\n    proto._nodeBufferAction = function(type, isReadAction, byteOffset, littleEndian, value) {\n        this._offset = byteOffset + dataTypes[type];\n        var nodeName = nodeNaming[type] + (\"Int8\" === type || \"Uint8\" === type ? \"\" : littleEndian ? \"LE\" : \"BE\");\n        return byteOffset += this.byteOffset, isReadAction ? this.buffer[\"read\" + nodeName](byteOffset) : this.buffer[\"write\" + nodeName](value, byteOffset);\n    };\n    for (var type in dataTypes) !function(type) {\n        proto[\"get\" + type] = function(byteOffset, littleEndian) {\n            return this._action(type, !0, byteOffset, littleEndian);\n        }, proto[\"set\" + type] = function(byteOffset, value, littleEndian) {\n            this._action(type, !1, byteOffset, littleEndian, value);\n        };\n    }(type);\n    proto._setInt32 = proto._setUint32, proto._setInt16 = proto._setUint16, proto._setInt8 = proto._setUint8, \n    proto.setSigned = proto.setUnsigned;\n    for (var method in proto) \"set\" === method.slice(0, 3) && !function(type) {\n        proto[\"write\" + type] = function() {\n            Array.prototype.unshift.call(arguments, void 0), this[\"set\" + type].apply(this, arguments);\n        };\n    }(method.slice(3));\n    return jDataView;\n});","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('jdataview')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'jdataview'], factory) :\n  (global = global || self, factory(global.sfparser = {}, global.JDataView));\n}(this, (function (exports, JDataView) { 'use strict';\n\n  JDataView = JDataView && JDataView.hasOwnProperty('default') ? JDataView['default'] : JDataView;\n\n  var TwsType;\n  (function (TwsType) {\n      TwsType[TwsType[\"INVALID\"] = 0] = \"INVALID\";\n      TwsType[TwsType[\"BOOL\"] = 1] = \"BOOL\";\n      TwsType[TwsType[\"INT8\"] = 2] = \"INT8\";\n      TwsType[TwsType[\"INT16\"] = 3] = \"INT16\";\n      TwsType[TwsType[\"INT32\"] = 4] = \"INT32\";\n      TwsType[TwsType[\"INT64\"] = 5] = \"INT64\";\n      TwsType[TwsType[\"UINT8\"] = 6] = \"UINT8\";\n      TwsType[TwsType[\"UINT16\"] = 7] = \"UINT16\";\n      TwsType[TwsType[\"UINT32\"] = 8] = \"UINT32\";\n      TwsType[TwsType[\"UINT64\"] = 9] = \"UINT64\";\n      TwsType[TwsType[\"SINGLE\"] = 10] = \"SINGLE\";\n      TwsType[TwsType[\"DOUBLE\"] = 11] = \"DOUBLE\";\n      TwsType[TwsType[\"COORD2D\"] = 12] = \"COORD2D\";\n      TwsType[TwsType[\"COORD3D\"] = 13] = \"COORD3D\";\n      TwsType[TwsType[\"UTF16\"] = 14] = \"UTF16\";\n      TwsType[TwsType[\"ASCII\"] = 15] = \"ASCII\";\n      TwsType[TwsType[\"ANGLE\"] = 16] = \"ANGLE\";\n      TwsType[TwsType[\"ASCII_W21\"] = 33] = \"ASCII_W21\";\n      TwsType[TwsType[\"UNKNOWN_23\"] = 35] = \"UNKNOWN_23\";\n      TwsType[TwsType[\"UNKNOWN_24\"] = 36] = \"UNKNOWN_24\";\n      TwsType[TwsType[\"ASCII_W25\"] = 37] = \"ASCII_W25\";\n      TwsType[TwsType[\"UNKNOWN_26\"] = 38] = \"UNKNOWN_26\";\n      TwsType[TwsType[\"BOOL_ARRAY\"] = 65] = \"BOOL_ARRAY\";\n      TwsType[TwsType[\"INT8_ARRAY\"] = 66] = \"INT8_ARRAY\";\n      TwsType[TwsType[\"INT16_ARRAY\"] = 67] = \"INT16_ARRAY\";\n      TwsType[TwsType[\"INT32_ARRAY\"] = 68] = \"INT32_ARRAY\";\n      TwsType[TwsType[\"INT64_ARRAY\"] = 69] = \"INT64_ARRAY\";\n      TwsType[TwsType[\"UINT8_ARRAY\"] = 70] = \"UINT8_ARRAY\";\n      TwsType[TwsType[\"UINT16_ARRAY\"] = 71] = \"UINT16_ARRAY\";\n      TwsType[TwsType[\"UINT32_ARRAY\"] = 72] = \"UINT32_ARRAY\";\n      TwsType[TwsType[\"UINT64_ARRAY\"] = 73] = \"UINT64_ARRAY\";\n      TwsType[TwsType[\"SINGLE_ARRAY\"] = 74] = \"SINGLE_ARRAY\";\n      TwsType[TwsType[\"DOUBLE_ARRAY\"] = 75] = \"DOUBLE_ARRAY\";\n      TwsType[TwsType[\"COORD2D_ARRAY\"] = 76] = \"COORD2D_ARRAY\";\n      TwsType[TwsType[\"COORD3D_ARRAY\"] = 77] = \"COORD3D_ARRAY\";\n      TwsType[TwsType[\"UTF16_ARRAY\"] = 78] = \"UTF16_ARRAY\";\n      TwsType[TwsType[\"ASCII_ARRAY\"] = 79] = \"ASCII_ARRAY\";\n      TwsType[TwsType[\"ANGLE_ARRAY\"] = 80] = \"ANGLE_ARRAY\";\n      TwsType[TwsType[\"RECORD\"] = 128] = \"RECORD\";\n      TwsType[TwsType[\"RECORD_BLOCK\"] = 129] = \"RECORD_BLOCK\";\n      TwsType[TwsType[\"RECORD_BLOCK_ENTRY\"] = -1] = \"RECORD_BLOCK_ENTRY\";\n      TwsType[TwsType[\"BOOL_TRUE\"] = 18] = \"BOOL_TRUE\";\n      TwsType[TwsType[\"BOOL_FALSE\"] = 19] = \"BOOL_FALSE\";\n      TwsType[TwsType[\"UINT32_ZERO\"] = 20] = \"UINT32_ZERO\";\n      TwsType[TwsType[\"UINT32_ONE\"] = 21] = \"UINT32_ONE\";\n      TwsType[TwsType[\"UINT32_BYTE\"] = 22] = \"UINT32_BYTE\";\n      TwsType[TwsType[\"UINT32_SHORT\"] = 23] = \"UINT32_SHORT\";\n      TwsType[TwsType[\"UINT32_24BIT\"] = 24] = \"UINT32_24BIT\";\n      TwsType[TwsType[\"INT32_ZERO\"] = 25] = \"INT32_ZERO\";\n      TwsType[TwsType[\"INT32_BYTE\"] = 26] = \"INT32_BYTE\";\n      TwsType[TwsType[\"INT32_SHORT\"] = 27] = \"INT32_SHORT\";\n      TwsType[TwsType[\"INT32_24BIT\"] = 28] = \"INT32_24BIT\";\n      TwsType[TwsType[\"SINGLE_ZERO\"] = 29] = \"SINGLE_ZERO\";\n      TwsType[TwsType[\"BOOL_TRUE_ARRAY\"] = 82] = \"BOOL_TRUE_ARRAY\";\n      TwsType[TwsType[\"BOOL_FALSE_ARRAY\"] = 83] = \"BOOL_FALSE_ARRAY\";\n      TwsType[TwsType[\"UINT_ZERO_ARRAY\"] = 84] = \"UINT_ZERO_ARRAY\";\n      TwsType[TwsType[\"UINT_ONE_ARRAY\"] = 85] = \"UINT_ONE_ARRAY\";\n      TwsType[TwsType[\"UINT32_BYTE_ARRAY\"] = 86] = \"UINT32_BYTE_ARRAY\";\n      TwsType[TwsType[\"UINT32_SHORT_ARRAY\"] = 87] = \"UINT32_SHORT_ARRAY\";\n      TwsType[TwsType[\"UINT32_24BIT_ARRAY\"] = 88] = \"UINT32_24BIT_ARRAY\";\n      TwsType[TwsType[\"INT32_ZERO_ARRAY\"] = 89] = \"INT32_ZERO_ARRAY\";\n      TwsType[TwsType[\"INT32_BYTE_ARRAY\"] = 90] = \"INT32_BYTE_ARRAY\";\n      TwsType[TwsType[\"INT32_SHORT_ARRAY\"] = 91] = \"INT32_SHORT_ARRAY\";\n      TwsType[TwsType[\"INT32_24BIT_ARRAY\"] = 92] = \"INT32_24BIT_ARRAY\";\n      TwsType[TwsType[\"SINGLE_ZERO_ARRAY\"] = 93] = \"SINGLE_ZERO_ARRAY\";\n      TwsType[TwsType[\"LONG_RECORD\"] = 160] = \"LONG_RECORD\";\n      TwsType[TwsType[\"LONG_RECORD_BLOCK\"] = 224] = \"LONG_RECORD_BLOCK\";\n  })(TwsType || (TwsType = {}));\n\n  // TODO: make clear to not wrap array entries\n  // TODO: wrap result in ArrayNode, store typeCode, size etc.\n  class ArrayNode {\n      constructor(typeCode, size, data) {\n          this.typeCode = typeCode;\n          this.size = size;\n          this.data = data;\n      }\n      static read(reader, typeCode) {\n          switch (typeCode) {\n              case TwsType.UINT32_BYTE_ARRAY:\n              case TwsType.UINT32_SHORT_ARRAY:\n              case TwsType.UINT32_24BIT_ARRAY:\n              case TwsType.INT32_24BIT_ARRAY:\n              case TwsType.INT32_BYTE_ARRAY:\n              case TwsType.INT32_SHORT_ARRAY:\n              case TwsType.UINT8_ARRAY:\n              case TwsType.UINT32_ARRAY:\n              case TwsType.UINT64_ARRAY:\n              case TwsType.ASCII_ARRAY:\n              case TwsType.UTF16_ARRAY:\n              case TwsType.COORD2D_ARRAY:\n              case TwsType.UINT16_ARRAY:\n              case TwsType.INT8_ARRAY:\n              case TwsType.SINGLE_ARRAY:\n              case TwsType.BOOL_ARRAY:\n              case TwsType.INT32_ARRAY:\n                  return ArrayNode.readArray(reader, typeCode);\n              case TwsType.INT16_ARRAY:\n              case TwsType.INT64_ARRAY:\n              case TwsType.DOUBLE_ARRAY:\n              case TwsType.COORD3D_ARRAY:\n              case TwsType.ANGLE_ARRAY:\n                  // i.e. untested, need a savefile to test\n                  throw new Error(`Array type - Not implemented: ${typeCode}`);\n              case TwsType.BOOL_TRUE_ARRAY:\n              case TwsType.BOOL_FALSE_ARRAY:\n              case TwsType.UINT_ZERO_ARRAY:\n              case TwsType.UINT_ONE_ARRAY:\n              case TwsType.INT32_ZERO_ARRAY:\n              case TwsType.SINGLE_ZERO_ARRAY:\n                  // trying to read this should result in an infinite loop\n                  throw new Error(`Array ${typeCode.toString(16)} of zero-byte entries makes no sense`);\n              default:\n                  throw new Error(`Unknown array type code ${typeCode}`);\n          }\n      }\n      static readArray(reader, typeCode) {\n          const size = reader.readSize();\n          const containedTypeCode = (typeCode - 0x40);\n          const offset = reader.position();\n          const elements = [];\n          while (reader.position() < (offset + size)) {\n              const node = reader.readValueNode(containedTypeCode);\n              elements.push(node);\n          }\n          return new ArrayNode(typeCode, size, elements);\n      }\n  }\n\n  class CompressedNode {\n      static read(reader, compressedNode) {\n          const values = compressedNode.data;\n          const data = values[0].data;\n          const infoNode = values[1].data;\n          const size = infoNode[0];\n          const decodeProperties = infoNode[1].data;\n          return reader.readCompressed(decodeProperties, data, size);\n      }\n  }\n  CompressedNode.TAG_NAME = \"COMPRESSED_DATA\";\n  CompressedNode.INFO_TAG = \"COMPRESSED_DATA_INFO\";\n\n  class Coordinate2dNode {\n      constructor(typeCode, data) {\n          this.typeCode = typeCode;\n          this.data = data;\n      }\n      static read(reader, typeCode) {\n          const data = [\n              reader.readFloat32(),\n              reader.readFloat32()\n          ];\n          return data;\n      }\n  }\n\n  class Coordinate3dNode {\n      constructor(typeCode, data) {\n          this.typeCode = typeCode;\n          this.data = data;\n      }\n      static read(reader, typeCode) {\n          const data = [\n              reader.readFloat32(),\n              reader.readFloat32(),\n              reader.readFloat32()\n          ];\n          return data;\n      }\n  }\n\n  class OptimizedBoolNode {\n      static readValue(reader, type) {\n          switch (type) {\n              case TwsType.BOOL:\n                  return !!reader.readUint8();\n              case TwsType.BOOL_TRUE:\n                  return true;\n              case TwsType.BOOL_FALSE:\n                  return false;\n              default:\n                  throw Error(\"OptimizedBoolNode#readValue invalid type!\");\n          }\n      }\n  }\n\n  class OptimizedFloatNode {\n      constructor() {\n      }\n      static read(reader, typeCode) {\n          if (typeCode === TwsType.SINGLE_ZERO) {\n              return 0;\n          }\n          else {\n              return reader.readFloat32();\n          }\n      }\n  }\n\n  class OptimizedIntNode {\n      constructor() {\n      }\n      // TODO: singleByteMin\n      static read(reader, typeCode, singleByteMin = false) {\n          switch (typeCode) {\n              case TwsType.INT32_ZERO:\n                  return 0;\n              case TwsType.INT32_BYTE:\n                  return reader.readInt8();\n              case TwsType.INT32_SHORT:\n                  return reader.readInt16();\n              case TwsType.INT32_24BIT:\n                  return OptimizedIntNode.readInt24(reader);\n              case TwsType.INT32:\n                  return reader.readInt32();\n              default:\n                  return;\n          }\n      }\n      static readInt24(reader) {\n          let value = reader.readUint8();\n          const sign = (value & 0x80) != 0;\n          value = value & 0x7f;\n          for (let i = 0; i < 2; i++) {\n              value = (value << 8) + reader.readUint8();\n          }\n          if (sign) {\n              value = -value;\n          }\n          return value;\n      }\n  }\n\n  class OptimizedUintNode {\n      constructor() {\n      }\n      // TODO: singleByteMin\n      static read(reader, typeCode, singleByteMin = false) {\n          switch (typeCode) {\n              case TwsType.UINT32_ZERO:\n                  return 0;\n              case TwsType.UINT32_ONE:\n                  return 1;\n              case TwsType.UINT32_BYTE:\n                  return reader.readUint8();\n              case TwsType.UINT32_SHORT:\n                  return reader.readUint16();\n              case TwsType.UINT32_24BIT:\n                  return OptimizedUintNode.readUint24(reader);\n              case TwsType.UINT32:\n                  return reader.readUint32();\n              default:\n                  return;\n          }\n      }\n      static readUint24(reader) {\n          let value = 0;\n          for (let i = 0; i < 3; i++) {\n              value = (value << 8) + reader.readUint8();\n          }\n          return value;\n      }\n  }\n\n  class RecordEntryNode {\n      constructor(typeCode, name, data, size) {\n          this.typeCode = typeCode;\n          this.name = name;\n          this.data = data;\n          this.size = size;\n      }\n      static read(reader, typeCode, name) {\n          const size = reader.readSize();\n          const offset = reader.position() + size;\n          try {\n              const data = reader.readToOffset(offset);\n              return new RecordEntryNode(typeCode, name, data, size);\n          }\n          catch (e) {\n              console.log(\"ERROR READING RECORD_ENTRY_NODE -> \" + name);\n              throw e;\n          }\n      }\n  }\n\n  class RecordArrayNode {\n      constructor(name, size, version, typeCode, data) {\n          this.name = name;\n          this.size = size;\n          this.version = version;\n          this.typeCode = typeCode;\n          this.data = data;\n      }\n      static read(reader, typeCode) {\n          const recordInfo = reader.readRecordInfo(typeCode);\n          const size = reader.readSize();\n          const itemCount = reader.readSize();\n          const containedNodes = [];\n          for (let i = 0; i < itemCount; i++) {\n              const contained = RecordEntryNode.read(reader, typeCode, `${recordInfo.name} - ${i}`);\n              containedNodes.push(contained);\n          }\n          return new RecordArrayNode(recordInfo.name, recordInfo.version, size, typeCode, containedNodes);\n      }\n  }\n\n  class RecordNode {\n      constructor(typeCode, name, version, size, data) {\n          this.typeCode = typeCode;\n          this.name = name;\n          this.version = version;\n          this.size = size;\n          this.data = data;\n      }\n      static read(reader, typeCode) {\n          const recordInfo = reader.readRecordInfo(typeCode);\n          try {\n              const size = reader.readSize();\n              const data = reader.readToOffset(reader.position() + size);\n              const node = new RecordNode(typeCode, recordInfo.name, recordInfo.version, size, data);\n              if (recordInfo.name === CompressedNode.TAG_NAME) {\n                  return CompressedNode.read(reader, node);\n              }\n              return node;\n          }\n          catch (e) {\n              console.log(\"ERROR READING RECORD_NODE -> \" + recordInfo.name);\n              throw e;\n          }\n      }\n  }\n\n  class TwsHeader {\n      constructor(id, unknown1, editTime) {\n          this.id = id;\n          this.unknown1 = unknown1;\n          this.editTime = editTime;\n      }\n      static read(reader) {\n          const id = reader.readUint32();\n          const unknown1 = reader.readUint32();\n          const editTime = reader.readUint32();\n          return new TwsHeader(id, unknown1, editTime);\n      }\n  }\n\n  class Type26 {\n      static read(reader) {\n          const firstByte = reader.readUint8();\n          if (firstByte === 16) {\n              return reader.readBytes(16);\n          }\n          else if (firstByte === 8) {\n              return reader.readBytes(8);\n          }\n          else {\n              return reader.readBytes(7);\n          }\n      }\n  }\n\n  const LZMA = require(\"lzma/src/lzma_worker.js\");\n  const UTF8_DECODER = new TextDecoder(\"utf-8\");\n  const UTF16_DECODER = new TextDecoder(\"utf-16\");\n  class TwsReader {\n      constructor(buffer) {\n          this.dataView = new JDataView(new Int8Array(buffer), 0, buffer.byteLength, true);\n          this.header = TwsHeader.read(this);\n          if (this.header.id !== 0xABCA) {\n              throw new Error(`header.id '${this.header.id.toString(16)}' is not supported!`);\n          }\n          const stringValues = this.readStringArrays();\n          this.nodeNames = stringValues.nodeNames;\n          this.utf16Strings = stringValues.utf16Strings;\n          this.asciiStrings = stringValues.asciiStrings;\n      }\n      readAll() {\n          const typeCode = this.readTypeCode();\n          const rootNode = this.read(typeCode);\n          return rootNode;\n      }\n      readToOffset(targetOffset) {\n          const result = [];\n          while (this.position() < targetOffset) {\n              const typeCode = this.readTypeCode();\n              const node = this.read(typeCode);\n              result.push(node);\n          }\n          return result;\n      }\n      readRecordInfo(encoded = 0) {\n          // root node (and only root node) is stored with long name/version info...\n          if (this.position() === TwsReader.HEADER_LENGTH + 1 || (encoded & TwsReader.LONG_INFO) != 0) {\n              const nameIndex = this.readUint16();\n              const version = this.readUint8();\n              return {\n                  name: this.getNodeName(nameIndex),\n                  version: version\n              };\n          }\n          else {\n              const version = (encoded & 31) >> 1;\n              const nameIndex = ((encoded & 1) << 8) + this.readUint8();\n              return {\n                  name: this.getNodeName(nameIndex),\n                  version: version,\n              };\n          }\n      }\n      getNodeName(nameIndex) {\n          if (nameIndex > this.nodeNames.length) {\n              throw new Error(`invalid node index: ${nameIndex}`);\n          }\n          return this.nodeNames[nameIndex];\n      }\n      read(typeCode) {\n          const recordBit = (typeCode & TwsReader.RECORD_BIT);\n          if (recordBit == 0 || this.position() === TwsReader.HEADER_LENGTH + 1) {\n              switch (typeCode) {\n                  case TwsType.INT32_ZERO:\n                  case TwsType.INT32_BYTE:\n                  case TwsType.INT32_SHORT:\n                  case TwsType.INT32_24BIT:\n                  case TwsType.INT32:\n                      return OptimizedIntNode.read(this, typeCode);\n                  default:\n                      return this.readNode(typeCode);\n              }\n          }\n          else {\n              const blockBit = ((typeCode & TwsReader.BLOCK_BIT) != 0);\n              if (blockBit) {\n                  return RecordArrayNode.read(this, typeCode);\n              }\n              else {\n                  return RecordNode.read(this, typeCode);\n              }\n          }\n      }\n      readNode(typeCode) {\n          try {\n              if (typeCode < TwsType.BOOL_ARRAY) {\n                  return this.readValueNode(typeCode);\n              }\n              else if (typeCode < TwsType.RECORD) {\n                  return ArrayNode.read(this, typeCode);\n              }\n              else if (typeCode === TwsType.RECORD) {\n                  return RecordNode.read(this, typeCode);\n              }\n              else if (typeCode === TwsType.RECORD_BLOCK) {\n                  throw new Error(\"decodeNode 'readRecordArrayNode' not implemented\");\n              }\n              else {\n                  throw new Error(`Type code ${typeCode} at ${this.position() - 1} invalid`);\n              }\n          }\n          catch (error) {\n              console.error(`Exception at (${this.position()})`, typeCode, error);\n              throw error;\n          }\n      }\n      // TODO: make clear to not wrap array values, i.e. if array then raw else wrap valueNode in DataNode\n      readValueNode(typeCode, optimize = true) {\n          switch (typeCode) {\n              case TwsType.BOOL:\n              case TwsType.BOOL_TRUE:\n              case TwsType.BOOL_FALSE:\n                  if (optimize) {\n                      return OptimizedBoolNode.readValue(this, typeCode);\n                  }\n                  else {\n                      throw new Error(\"Not implmented: new BoolNode();\");\n                  }\n              case TwsType.INT8:\n                  return this.readInt8();\n              case TwsType.INT16:\n                  return this.readInt16();\n              case TwsType.UINT32:\n              case TwsType.UINT32_ZERO:\n              case TwsType.UINT32_ONE:\n              case TwsType.UINT32_BYTE:\n              case TwsType.UINT32_SHORT:\n              case TwsType.UINT32_24BIT:\n                  if (optimize) {\n                      return OptimizedUintNode.read(this, typeCode);\n                  }\n                  else {\n                      throw new Error(\"Not implmented: new IntNode();\");\n                  }\n              case TwsType.INT64:\n                  return this.readInt64();\n              case TwsType.UINT8:\n                  return this.readUint8();\n              case TwsType.UINT16:\n                  return this.readUint16();\n              case TwsType.UINT32:\n              case TwsType.INT32:\n              case TwsType.INT32_ZERO:\n              case TwsType.INT32_BYTE:\n              case TwsType.INT32_SHORT:\n              case TwsType.INT32_24BIT:\n                  if (optimize) {\n                      return OptimizedIntNode.read(this, typeCode);\n                  }\n                  else {\n                      throw new Error(\"Not implmented: new IntNode();\");\n                  }\n              case TwsType.UINT64:\n                  return this.readUint64();\n              case TwsType.SINGLE:\n              case TwsType.SINGLE_ZERO:\n                  if (optimize) {\n                      return OptimizedFloatNode.read(this, typeCode);\n                  }\n                  else {\n                      throw new Error(\"Not implmented: new FloatNode();\");\n                  }\n              case TwsType.DOUBLE:\n                  throw new Error(\"Not implemented: SfType.DOUBLE\");\n              case TwsType.COORD2D:\n                  return Coordinate2dNode.read(this, typeCode);\n              case TwsType.COORD3D:\n                  return Coordinate3dNode.read(this, typeCode);\n              case TwsType.UTF16:\n                  return this.lookupString(this.utf16Strings);\n              case TwsType.UNKNOWN_23:\n                  const buffer23 = this.readBytes(1);\n                  return buffer23;\n              case TwsType.UNKNOWN_24:\n                  const buffer24 = this.readBytes(2);\n                  return buffer24;\n              case TwsType.UNKNOWN_26:\n                  return Type26.read(this);\n              case TwsType.ASCII:\n              case TwsType.ASCII_W21:\n              case TwsType.ASCII_W25:\n                  return this.lookupString(this.asciiStrings);\n              case TwsType.ANGLE:\n                  return this.readUint16();\n              default:\n                  throw new Error(`Invalid type code ${typeCode.toString(16)}`);\n          }\n      }\n      readSize() {\n          let read = this.readUint8();\n          let result = 0;\n          while ((read & 0x80) != 0) {\n              result = (result << 7) + (read & 0x7f);\n              read = this.readUint8();\n          }\n          result = (result << 7) + (read & 0x7f);\n          return result;\n      }\n      lookupString(strings) {\n          const refId = this.readInt32();\n          return strings[refId];\n      }\n      readStringArrays() {\n          const nodeNamesOffset = this.readUint32();\n          const restorePosition = this.position();\n          this.seek(nodeNamesOffset);\n          const nodeNamesLength = this.readInt16();\n          const nodeNames = new Array(nodeNamesLength).fill(null).map(() => this.readStringUtf8());\n          const utf16Strings = this.readStringList(this.readStringUtf16.bind(this));\n          const asciiStrings = this.readStringList(this.readStringUtf8.bind(this));\n          this.seek(restorePosition);\n          return {\n              nodeNames,\n              utf16Strings,\n              asciiStrings\n          };\n      }\n      readStringList(readString) {\n          const count = this.readInt32();\n          const result = [];\n          for (let i = 0; i < count; i++) {\n              const str = readString();\n              const ref = this.readUint32();\n              result[ref] = str;\n          }\n          return result;\n      }\n      // TODO: minize exposure external dependencies\n      readInt8() { return this.dataView.getInt8(); }\n      readInt16() { return this.dataView.getInt16(); }\n      readInt32() { return this.dataView.getInt32(); }\n      readInt64() { return this.dataView.getInt64(); }\n      readUint8() { return this.dataView.getUint8(); }\n      readUint16() { return this.dataView.getUint16(); }\n      readUint32() { return this.dataView.getUint32(); }\n      readUint64() { return this.dataView.getUint64(); }\n      readFloat32() { return this.dataView.getFloat32(); }\n      readTypeCode() { return this.dataView.getUint8(); }\n      position() { return this.dataView.tell(); }\n      seek(offset) { return this.dataView.seek(offset); }\n      readBytes(length) { return this.dataView.getBytes(length); }\n      readStringUtf8() {\n          const length = this.dataView.getUint16();\n          const buffer = new Uint8Array(this.dataView.getBytes(length));\n          return UTF8_DECODER.decode(buffer);\n      }\n      readStringUtf16() {\n          const length = this.dataView.getUint16();\n          const buffer = new Uint8Array(this.dataView.getBytes(length * 2));\n          return UTF16_DECODER.decode(buffer);\n      }\n      readCompressed(properties, data, size) {\n          const sizeAsBytes = [\n              size & 0xFF,\n              (size >> 8) & 0xFF,\n              (size >> 16) & 0xFF,\n              (size >> 24) & 0xFF,\n              0, 0, 0, 0\n          ];\n          const compressed = properties.concat(sizeAsBytes).concat(data);\n          const bytes = LZMA.LZMA_WORKER.decompress(compressed);\n          return new TwsReader(bytes).readAll();\n      }\n  }\n  TwsReader.RECORD_BIT = 0x80; // 10000000\n  TwsReader.BLOCK_BIT = 0x40; // 01000000\n  TwsReader.LONG_INFO = 0x20; // 00100000\n  TwsReader.HEADER_LENGTH = 16;\n\n  function read(buffer) {\n      const reader = new TwsReader(buffer);\n      const rootNode = reader.readAll();\n      return rootNode;\n  }\n\n  exports.read = read;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","import * as TwsParser  from \"total-war-save-parser\";\n\nself.addEventListener('message', (event) => {\n  try {\n    const rootNode = TwsParser.read(event.data);\n\n    const regionsArray = rootNode.data\n      .find(n => n.name === \"CAMPAIGN_SAVE_GAME\").data\n      .find(n => n.name === \"CAMPAIGN_ENV\").data\n      .find(n => n.name === \"CAMPAIGN_MODEL\").data\n      .find(n => n.name === \"WORLD\").data\n      .find(n => n.name === \"REGION_MANAGER\").data\n      .find(n => n.name === \"REGIONS_ARRAY\").data;\n\n    const regions_owners = regionsArray.map(entry => {\n      const region = entry.data.find(n => n.name === \"REGION\").data;\n\n      return {\n        regionKey: region[1],\n        regionOwnerIndex: region[14]\n      };\n    });\n\n    const factionArray = rootNode.data\n      .find(n => n.name === \"CAMPAIGN_SAVE_GAME\").data\n      .find(n => n.name === \"CAMPAIGN_ENV\").data\n      .find(n => n.name === \"CAMPAIGN_MODEL\").data\n      .find(n => n.name === \"WORLD\").data\n      .find(n => n.name === \"FACTION_ARRAY\").data;\n\n    const active_factions = factionArray.map(entry => {\n    const faction = entry.data.find(n => n.name === \"FACTION\").data;\n\n    return {\n        index: faction[0],\n        factionKey: faction[1]\n      };\n    });\n\n    const result = regions_owners.reduce((accumulator, entry) => {\n      const { regionKey, regionOwnerIndex } = entry;\n      const faction = active_factions.find(af => af.index === regionOwnerIndex);\n\n      accumulator[regionKey] = faction ? faction.factionKey : null;\n\n      return accumulator;\n    }, {});\n\n    self.postMessage({ success: true, result: result });\n  } catch (error) {\n    self.postMessage({ success: false, error });\n  }\n});\n","module.exports = require('./_shared')('native-function-to-string', Function.toString);\n"],"sourceRoot":""}